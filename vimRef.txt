##############################################################################
##############################################################################
##############################################################################
##############################################################################
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######          ##############################################          ######
######          ##############################################          ######
######          ###                                        ###          ######
######          ###              Retro Notes               ###          ######
######          ###                                        ###          ######
######          ###              GVIM Editor               ###          ######
######          ###                                        ###          ######
######          ##############################################          ######
######          ##############################################          ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                     AtomicRetro@outlook.com                      ######
######                                                                  ######
######                     Revision:  20.10.05                          ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
##############################################################################
##############################################################################
##############################################################################
##############################################################################

....|....1....|....2....|....3....|....4....|....5....|....6....|....7....|...


==============================
To View This Document Properly
==============================
* Best if viewed in VIM using with settings
     :set columns=80
     :set encoding=utf-8

* This document must be viewed with a mono-spaced font to enjoy the layout,
  tables and diagrams.

* This document must be viewed in an editor that can display unicode utf-8.


||||| Typographic Conventions ||||||||||||||||||||||||||||||||||||||||||||||||

   ...                  some arbitrary text
   [...]                Items in brackets are optional
   <...>                Indicates either a special key that must be pressed
                        or a user provided value
                           Special Keys
                           <ESC>     the escape key
                           <CR>      the enter or carriage return key
                           <leader>  default is backslash key
                           <super>   the windoww key
                           <TAB>     the tab key

                           Some User Variables
                           <abbrev>  an abbreviation string
                           <addr>    an address
                           <bkMark>  a bookmark (see Bookmarks & Registers)
                           <bkMark List>   any list of bookmarks
                           <bkMov>   '<bkMark> or `<bkMark>
                           <cmd>     a command
                           <cmds>    a set of commands
                           <digraph> a digraph key sequence
                           <edit-cmd>   a full edit command; see Editing
                           <file>    a filename
                           <flags>   a set of flags
                           <key>     any key or key-chord on the keyboard
                           <mov>     a move command
                           <mov-cmd> a full move command; see Move Commands
                           <n>       an integer; n > 1
                           <range>   an address range; see EX commands
                           <reg>     a register name
                           <regex>   see Regular Expressions
                           <sequence>   any sequence of keystrokes
   : ...                   : is the first character of an ex command when
                           vi is in visual normal mode.  However, in ex mode
                           the colon should be omitted.  The colon appears
                           precedes the commands below only to denote that
                           the command is actually an ex command.
   n or - (in column 1)    Most of the movement and editing commands are
                           preceded by  either 'n' or '-'.  The n indicates
                           an integer n > 1 (default is 1).  The '-' indicates
                           that the command ignores a preceding number.
   ^<char>                 '^' such as ^I or ^[ denotes keychord involving
                           control.  By holding the control key while
                           pressing the I, [, or whatever other symbol
                           follows the ^.  If char is an alpha it will
                           always be written as a capital letter, however
                           holding shift is not necessary.
   (...)                   a the line preceding an ex command contains a
                           a list of ex commands in parentheses those are
                           just alternate forms of the command.  In the
                           command itself on th eline below the shortest
                           of the command forms will be the one indicated.


||||| Entering Normal Mode |||||||||||||||||||||||||||||||||||||||||||||||||||

   Most of the commands in this document assume you are in NORMAL mode.
   Only the Insert Commands and Visual Commands assume other modes.

   <ESC>                usually pressing escape puts vim into normal mode.
                        once in normal mode pressing escape does nothing.

   exit<CR>             in terminal 'exit' and enter will go to normal mode


||||| EX Commands ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

   syntax:    : [<addr> or <range>] command [options] { | anotherFullCommand}
      Note that the colon `:' is only used in visual normal mode

      <addr>            Description
      ----------------  ------------------------------------
      n                 absolute line number n
      .                 cur line
      0                 top of buffer
      $                 last line
      -[<n>]            n lines prev
      +[<n>]            n lines after
      /<regex>/         next line matching pat
      ?<regex>?         previous line matching pat
      <addr>-n          n lines before x (a line address)
      <addr>+n          n lines after x (a line address)

      <range>           Description
      ----------------  ----------------------------------------
      <addr> , <addr>   the lines from the first addr to the second inclusive
      <addr> ; <addr>   idem, after opteration resets cur line to first <addr>
      %                 all lines in the buffer


||||| Quitting & Files |||||||||||||||||||||||||||||||||||||||||||||||||||||||

   Command              Description
   -------------------  ------------------------------------------------------
      Quitting
      --------
   ZQ                   quit vim (same as :q!) - discards all changes
   ZZ                   write if modified then quit (same as :wq)

   :quit, :q
      :q[!]             quit current viewport [! ignores warnings]

   :wq, :xit, :x
      :wq[!]            write and quit current viewport  [! override warnings]
      :x[!]             write if modified then quit viewport 
      :wqa              write and quit on all viewport 

      Writing
      -------
   :write, :w
      [<range>] :w[!]              write buf [range]
      [<range>] :w[!] [[>>]<file>] write buf [range] to file [>> for append]
      [<range>] :w !<cmd>          write buf [range] to command
      :w !sudo tee %               write buf using sudo
         !   overwrite [cur] file ignoring warnings

      ( :preserve, :pre )
   :pre                 Write cur edit buf as if the sys were about to crash.

      Reading
      -------
   :edit, :e
      :e[!][+<n>][<file>]  begin edit on file, or new copy of cur file at time
                        of last save; ! ignores unsaved edits to cur file;
                        n specifies a line to begin editing on, can be /regex.

      ( :read, :r )
   :[<addr>] r [<file>] copy file text after line specified by addr; if file
                        isn't specified cur file is used
   :[<addr>] r[!] <cmd> read output of cmd into the text after the line
                        specified by addr

      ( :recover, :rec )
   :rec [<file>]        recover file from system save area

      Renaming
      --------
   :saveas, :sav
      :sav <file>       save the current buffer as new filename

   :file, :f
      :f <file>         change filename; clear modified flag, doesn't write


||||| Moving |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

Move Commands
=============

   syntax:  [n] <mov-cmd>

         n              default 1, unless specified
         <mov>          movement command

   Movement Command     Description
   -------------------  ------------------------------------------------------
      Up Down Left Right
      ------------------
n  h                    n cols left (aliases left, bkspace, ^H)
n  l                    n cols right (aliases right, space)
n  k                    n lines upward (aliases up, ^P)
n  j                    n lines downward (aliases down, ^J, ^N)

      By Column
      ---------
-  0                    col 1 of cur line
-  ^                    first non-blank col of cur line
-  g_                   last non-blank col of cur line
n  |                    col n of cur line
n  $                    eol n-1 lines down from cur line

      By Lines
      --------
n  -                    first non-blank col n lines up
n  +                    first non-blank col n lines down (aliases CR, ^M)
n  _                    first non-blank col n-1 lines down
n  gg                   goto line n of cur buffer
n  G                    idem (default n=eof)
n                       move the cur n lines down

      By Text Units
      -------------
n  b                    begin of word n words backwards
n  B                    idem, ignore punct
n  e                    end of word n words forwards
n  E                    idem, ignore punct
n  w                    begin of word n words forwards
n  W                    idem, ignore punct

n  (                    n sentences back
n  )                    n sentences forward
n  {                    n paragraphs back
n  }                    n paragraphs forward
-  [[                   prev section (default buf line 1)
-  ]]                   next section (default buf eof)

-  %                    go between close and open: (), {}, []

      By Marks
      --------
-  ` <bkMark>             bookmark
-  g ` <bkMark>         idem; but don't change the jumplist
-  ' <bkMark>           begin of line with bookmark bkMark
-  g ' <bkMark>         idem; but don't change the jumplist

-  ^I                   go to newer position in jumplist
-  ^O                   go to older position in jumplist
 
      By Searching
      ------------
n  f <char>             find - nth occurrence of char right
n  F <char>             find - nth occurrence of char left
n  t <char>             to - col before nth occurrence of char right
n  T <char>             to - col after nth occurrence of char left
n  ;                    repeat latest (f,F,t,T) n times
n  ,                    idem, in opposite direction

n  *                    next nth occurrence of cur word
n  #                    prev nth occurrence of cur word

-  /<regex>[/<offset>]<CR> next occurrence of /regex [move cursor to offset]
-  ?<regex>[?<offset>]<CR> prev occurrence of ?regex [move cursor to offset]
-  <search>[;<search>]<CR> perform successive / or ? searches
                              offsets  -[n]  nth line before occurrence
                                       +[n]  nth line after occurrence

-  n                    next - repeat latest / or ? search
-  N                    next - idem in opposite direction

      By Tags
      -------
n  ^]                   idem, use cursor word for name
n  ^T                   pop pos: go back to nth pushed position on tag stack

n  :ta <name>           push cursor pos; go to nth def of name from tagfile

      By Window Units
      ---------------
n  H                    home - line n from top line of screen
n  L                    last - line n from bottom line of screen
-  M                    first non-blank on middle line of screen


||||| Editing ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

Edit Commands
=============

   syntax:  [<n>] [<bkMov>] [<reg>] <edit-cmd>

      n                 1, unless specified
      bkMov             bookmark movement: 'name or `name
      reg               register
      edit-cmd          an editing command from below

   Edit Command         Action
   -------------------  ------------------------------------------------------
      Inserting Text
      --------------
n  i                    insert <text> n times before cur
n  I                    insert <text> n times before first non-blank char
n  a                    append <text> n times after cur
n  A                    append <text> n times at eol
n  R                    replace: overtype rest of line
n  c  <mov>             change n of mov with <text> (default cur)
n  cc                   change n lines with <text>
n  C                    change rest of line and n-1 next lines
n  ciw                  change entire cur word
n  s                    subst: delete n chars and subst with <text>
n  S                    subst: delete n lines and subst with <text>
-  o                    open; insert new line above cur
-  O                    open; insert new line below cur

      Visual Edit
      -----------
-  v                    begin visual edit by char
-  V                    begin visual edit linewise
                           many edit commands work as expected in visual mode
                           lower case means modify selected chars
                           upper case means modify selected lines

      Cut Text Into Register
      ----------------------
n  [<reg>] x            delete: cut n chars starting with cursor
n  [<reg>] X            delete: cut n chars before cursor

-  [<reg>] D            delete: cut rest of line
n  [<reg>] d <mov>      delete: cut n of cur pos thru mov
-  <bkMov> [<reg>] d <mov> delete: cut bkMov thru mov

n  [<reg>] dd           delete lines: cut n lines from cur line
-  <bkMov> [<reg>] dd   delete lines: cut lines bkMov thru cur line

      ( :delete, :d )
   :[<range>] d [<buf>] delete lines in range, put into buffer

      Copy Text Into Register
      -----------------------
n  [<reg>] y <mov>      yank: copy cur pos to mov
-  <bkMov> [<reg>] y <mov> yank: copy bkMov thru mov

n  [<reg>] yy           yank lines: copy n lines (alias Y)
-  <bkMov> [<reg>] yy   yank lines: copy lines bkMov thru cur line

      ( :yank, :y )
   :[<range>] y [<buf>] [<n>] yank: copy n lines in range into buffer

      Paste Text From Register
      ------------------------
n  [<reg>] p            put: paste text n times after cursor
n  [<reg>] P            put: paste text n times before cursor
-  ]p                   put: paste and adjust indent to current line

      ( :put, :pu )
   :[<addr>] pu [<buf>] put:  paste text from buf at loc specified by addr

      Moving Text
      -----------
      ( :copy, :co, :t )
   :[<range>] t <dest-addr>   copy lines from range to specified dest-addr

      ( :move, :m )
   :[<addr>] m <dest-addr>    move lines from range to specified dest-addr

      indenting
      ---------
-  > [<mov>]            indent mov lines one shiftwidth
n  >>                   indent n lines one shiftwidth
-  >%                   indent a block with () or {} (cursor on brace)
-  >ib                  indent inner block with ()
-  >at                  indent a block with <>

-  < [<mov>]            outdent mov lines one shiftwidth
n  <<                   outdent n lines one shifwidth

      ( < and > )
   :[<range>] > [<n>]   indent/outdent range by shiftwidth. repeat < or >
                        to express multiples of shiftwidth.

-  = [mov]              filter mov lines through external program equalprg
n  ==                   reindent current n lines
-  =%                   reindent a block with () or {} (cursor on brace)
-  =iB                  reindent inner block with {}
.  gg=G                 reindent entire buffer
-  gwip                 reflow paragraph

      Undo/Redo
      ---------
n  u                    undo last n edit commands
-  U                    undo all changes on last line changed
n  ^R                   redo n edits

      ( :undo, :u )
   :u                   undo last edit

      Searching & Replacing
      ---------------------
   :global, :g, :v
      [<range>] :g[!]/<regex>/[<cmds>]

      Exec commands on every line [in range] matching regex.  If no commands,
      print all such lines.  ! means all lines NOT containing regex.  v is
      equivalent to g!

   :g/environ/s/old/new/g

      Searches for all lines containing environ, on those lines changes all
      occurrences of old with new.
      - environ and new can ge regular expressions.
      - If old is omitted, does a simple search of environ with new
      

   :substitute, :s
      [<range>] :s/<regex>/<repl>/[<flags>]
      :s                repeat last s command without the flags
      :s [<flags>]      repeat last s command with new flags

      Replace each instance of regex in buf [or range] with repl.  If regex
      and repl are omitted, repeat last substitution.  Flags are:
         &   must appear first; keep flags from last use
         c   confirm before each substitution
         e   when search fails, continues in maps as if no error occurred
         g   replace all regex occurrences in the line
         i   ignore case for regex
         I   don't ignore case for regex
         n   report num maches without making any changes
         p   print line containing last substitute
         #   like p, but prepend the line number
         l   like p, but print the text like :list
         r   (with s no args) use latest search regex instead of from last s

      Other Editing Commands
      ----------------------
n  J                    join n lines incl cur line (default 2)
n  gJ                   idem but no space added between

      ( join:, j: )
   [<range>] j[!][<n>]  join all lines in rage into one line with space adjust
                        two spaces after period, no space after close paren,
                        one space otherwise. ! prevents space adjust.

n  ~                    change case of n chars starting with cursor
n  g~ <mov>               swap case up to motion
n  gu                   change to lower case up to motion
n  gU                   idem but upper case

n  r <char>             replace n chars by char
n  ^R <reg>             insert contents of register
-  &                    repeat most recent ex :substitute command

n  .                    repeat last edit command n times

Insert Mode Commands
====================

   Insert Mode Command  Description
   -------------------  ------------------------------------------------------
   <TAB>                TAB (alias ^I)
   ^@                   replaced with prev text inserted then exits insert
                           mode if it's first char typed and autoindent is on

   ^U                   delete from line begin to cur, insert
   ^W                   delete word before the cursor
   ^H                   one char back (alias backspace)
   ^W                   one word back
   ^N                   insert auto-complete next match before cursor
   ^J                   begin new line
   ^P                   idem, but prev match

   ^T                   indent one shiftwidth if it's first char typed.
   ^D                   unindent one shifwidth if it's first char typed
   0 ^D                 unindent all indentation on cur line
   ^ ^D                 idem, but it's restored on next line.

   ^V <key>             ignoring special meaning of key key
                           (eg. ^V <ESC>) (alias ^Q)
   ^K <digraph>         insert a utf-8 character (see :help digraph)

   ESC                  exit insert mode (aliases F11, ^[)

Visual Mode Commands
====================

   Visual Mode Command  Description
   -------------------  ------------------------------------------------------
      Move
      ----
   h,j,k,l              move cursor
   aw                   a word
   as                   a sentence
   ap                   a paragraph
   a(  or  ab           a block with parentheses ( )
   i(  or  ib           idem, but an inner block
   a{  or  aB           a block with braces { }
   i{  or  iB           idem, but an inner block
   a<  or  at           a block with angled brackets < >
   i<  or  it           idem, but an inner block
   a[                   a block with brackets [ ]
   i[                   idem, but an inner block
   a"                   a doulbe quoted string (with quotes)
   a'                   a single quoted string (with quotes)
   a`                   a string with backticks (with backticks)
   o                    move to other end of marked area
   O                    move to other corner of block

      Edit
      ----
   I                    block insert
   A                    block append
   >                    indent selected by shiftwidth
   <                    unindent selected by shiftwidth
   =                    filter lines through equalprg option command
   ~                    switch case of selected
   U                    make uppercase
   u                    make lowercase
   d                    delete marked text

   y                    yank (copy) marked text

   <ESC>                unselect and exit visual mode without edits


||||| Other Commands |||||||||||||||||||||||||||||||||||||||||||||||||||||||||

   Command              Description
   -------------------  ------------------------------------------------------
      Scrolling
      ---------
n  ^E                   scroll up n lines
n  ^U                   scroll up n half screens
n  ^B                   scroll up n screens
n  ^Y                   scroll down n lines
n  ^D                   scroll down n half screens
n  ^F                   scroll down n screens
n  z                    scroll line n to screen top (default cur ln)
n  z-                   scroll line n to screen bottom (default cur ln)
n  z.                   scroll line n to screen middle (default cur ln)
n  zz                   idem

   :[<addr>] z [<type>] [<n>] print n lines from addr at the top; type can be
                        + (default) place line at top of viewport
                        - place line at bottom of viewport
                        . place line at center of viewport
                        ^ pring previous range of lines
                        = place line at center of viewport, leave cur
                          line unchanged

      Key Mapping
      -----------
      ( :map, :unmap, :unm, :verbose map, :vmap, :vunmap )
   :map [!] [<char>]       show all [! insert mode] mappings [for char]
   :map [!] <char> <cmds>  map [! insert mode] char to commands
   :unm [!] <char>         clear [! insert mode] mapping of char
   :verbose map [<char>]   show mappings [for char] verbosely

   :noremap,:noreunmap     mapping without recursion
   :nnoremap,nnoreunmap    normal mode mapping without recursion

      Abbreviations
      -------------
      ( :abbrev, :ab, :unabbreviate, :una )
   :ab                     show all current insert mode abbreviations
   :ab [<abbrev> <text>]   set insert mode abbreviation to text
   :una abbrev             clear insert mode abbreviation

   Abbreviations expand text while in insert mode.

      Macros
      ------
   q <reg> <sequence> q macro: record <sequence>, store in reg
   @ <reg>              macro: run sequence stored in reg
   @@                   macro: run sequence - repeat latest @ reg command

      Marks
      -----
   m <bkMark>           mark the cur pos, with bkMark

      ( :mark, :ma, :k )
   [addr] k <bkMark>    mark the addr line with mark bkMark

      ( :marks )
   :marks [<bkMark List>]  list all the [bkMark List] marks

      Command Line Args
      -----------------
      ( :args, :ar )
   :ar                  print the command line argument list.

      ( :next, :n )
   n[!] [[+<n>] <filelist>] edit next file from command line file list.
                        If a file list is provided replace cur file list with
                        the one specified and begin editing the first one.
                        Begin editing on line n, or n can be /regex.
                        <filelist> is defined as <file> {<file>}

      ( :rewind, :rew )
   :rew[!]              rewind argument list and start editing first file.
                        ! ignores unsaved changes in cur buffer

      Buffer Commands
      ---------------
      ( :buffers, :ls )
   :buffers, :ls        list the current buffers
                           % indicates the current buffer
                           # indicates the alternate buffer
                           a indicates an active buffer
                           h indicates a hidden buffer
                           + indicates unsaved modifications

      ( :bnext, :bn )
   :bnext, :bn          switch to the next buffer

      ( :bnext, :bN, :bprevious, :bp )
   :bp                  switch to the previous buffer

      ( :buffer,:buf,:bu,:b )
   :b <n>               switch to buffer number <n>

   :b#                  switch to the alternate buffer

   ^6                   toggle between current and alternate buffers

      ( :bdelete, :bdel, :bd )
   :bd[!]               delete cur buffer, doesn't save [ignore warnings].

      Splits & Viewports
      ------------------

      ( :split, :sp )
   :sp                  make a horizontal split resulting in two viewports
   :sp <file>           open file in new buffer in new horizontal split

      ( :vsplit, :vs )
   :vs                  make a vertical split resulting in two viewports
   :vs <file>           open file in new buffer in new vertical split
   
   ^W (h,j,k,l)         go to the viewport above,below,to left,to right

   ^w c                 close the current split/viewport

   ^W o                 only: close all other splits/viewports

   :close, :clo
      :clo              close the current split

      Tab Commands
      ------------
      ( :tabnew )
   :tabnew [<file>]     create a new tab [open file in it]

      ( :tabnext, :tabn )
   :tabn                move to the next tab   (gt in vi)

      ( :tabprevious, :tabp )
   :tabp                move to the previous tab  (gT in vi)

      ( :tabmove, :tabm )
   :tabm <n>            move cur tab to the nth pos (default 1)

      ( :tabclose, :tabc )
   :tabc                close cur tab and all it's splits

      ( :tabonly, :tabo )
   :tabo                close all tabs except cur tab

      ( :tabdo )
   :tabdo <cmd>         run command on all tabs
   :tabdo q             close all opened tabs

      Getting Help
      ------------
      ( :help, :h, :helpgrep, :helpg )
   :h option-summary    summaries for all available options
   :h <subject>         show help on subject
   :h <string> ^D       list help subjects containting string
   :helpg <regex>       list help subjects matching regex
      special string values
      :cmd              help on ex command cmd
      '<option>'        help on vi option

   K                    OS man page for cur word

      Displaying Information
      ----------------------
   ^G                   show filename, modified flag, total lines
   g ^G                 show location, line, word and byte counts

      ( :print, :p, P )
   :[<addr>] p [<n>]    print lines in range

   :[<addr>] =          print line; default is cur line.

   :[<range>]           print lines in range

      ( :list, :l )
   :[<range>] l [<n>]   print lines in range as if 'list' option were set

      ( :number, :nu, :# )
   :[<range>] # [<n>]   print lines in range preceded by line numbers

   :<CR>                print next line in the buffer

      External Shell Commands
      -----------------------
      ( :shell, :sh )
   :sh                  open a shell

      ( !, !! )
   [range] !<cmd>       filter [range] lines through command
   !!                   repeat last !command

      filter with external command all lines [in range] as input to command,
      and replace the lines with the output and error output.

      ( :terminal, :term, :ter )
   :ter                 open a new split with a terminal/shell

      Other Commands
      --------------
      ( :jumps )
   :ju                  list the jumplist

      ( :changes )
   :changes             list of changes to the current buffer

      ( :digraph-table )
   :digraph-table       table of digraphs

      ( :digraphs, :digraph )
   :digraphs            condenced digraph table

      ( :set, :se )
   :se                  show all options with non default values
   :se all              show all current option values
   :se <option>?        display value of option
   :se [no]<option>     toggle the option
   :se <option>=<value> set the option to value

      ( :open, :o )
   :[<addr>] o [/<regex>]   Enter open mode (vi) at the lines specified by addr,
                        or at lines matching regex. Exit open with Q.
      ( :visual, :vi )
   :[<addr>] vi [<type>] [<n>]   enter vi mode at specified line; exit with Q
                        type can be -, ^ or . (see z command);
                        n specifies initial viewport size
   :vi [+n] [<file>]    begin edit on file in vi mode

      ( :source, :so )
   :so <file>           Read in file as a list of ex commands to execute
   :so %                Read in cur file as a list of ex commands to execute

      ( :tag, :ta )
   :[<addr>] ta         switch focus of editing to tag

      ( :tags )
   :tags                list the tag stack

      ( :version, :ve )
   :ve                  print date and version num of the editor.


||||| Bookmarks & Registers ||||||||||||||||||||||||||||||||||||||||||||||||||

Bookmarks

   Bookmark             Description
   -------------------  ------------------------------------------------------
   a-z                  bookmark (local within buf)
   A-Z                  bookmark (persistent across buffer)
   `                    cursor pos before last absolute jump
   '                    begin of line before last absolute jump
   "                    position when last editing this file
   .                    last change in this buffwer
   ;                    older position in change list
   [                    first char of the previously changed or yanked text
   ]                    last char of the previously changed or yanked text
   <                    first line of latest visual select
   >                    last line of latest visual select
   (                    start of current sentence
   )                    end of current sentence
   {                    start of current paragraph
   }                    end of current paragraph
   0                    position where vim was previously exited

Registers

      ( :registers, :reg )
   :reg [names]         list registers in use [in names]

   Register             Description
   -------------------  ------------------------------------------------------
   <empty>  or  ""      the default register
   "*       or  "+      system clipboard
   "a-z                 user registers
   "A-Z                 same as a-z buffers but for append
   "1-9                 most recent to least recent delete registers
   "-                   small delete register (deletions of less than a line)
   "/                   last search regex
   "~                   read only, content from last drag-n-drop of text
   "%                   current filename
   "#                   alternate filename
   ":                   latest command line
   ".                   latest inserted text
   "=                   expression register
   "_                   black hole register


||||| Regular Expressions ||||||||||||||||||||||||||||||||||||||||||||||||||||

   Sequence             Description
   -------------------  ------------------------------------------------------
      Pattern atom
      ------------
   ^                    start matching from begin of a line
   $                    match regex should terminate at an eol
   .                    Matches any single character except a newline

      Pattern Qualifiers
      ------------------
      Braces { and } should be typed literally here
   *                    Greedy match preceding char 0 or more times
   .*                   Matches any number of any characters
   \+                   Greedy match preceding char 1 or more times
   \?                   match preceding char 0 or 1 times
   \{-}                 Non-greedy match preceding char 0 or more times
   \{[min],[max]}       Greedy match preceding char min to max times
                           min default = 0, max default = infinity
   \{-min,max}          Non-greedy match as little as possible
   \{num}               Match exact number of times

      Character Classes
      -----------------
   [abcde]              match any of a,b,c,d, or e once
   [a-e]                match any of a thru e once
   [^abc]               match anything other than a,b or c
   [^a-e]               match anything other than a thru e
   \a                   match alpha              [a-zA-Z]
   \A                   match non-alpha          [^a-zA-Z]
   \l                   match alpha lower        [a-z]
   \L                   match non alpha lower    [^a-z]
   \u                   match alpha upper        [A-Z]
   \U                   match non alpha upper    [^A-Z]
   \d                   match dec digit          [0-9]
   \D                   match non dec digit      [^0-9]
   \x                   match hex digit          [0-9a-fA-F]
   \X                   match non hex digit      [^0-9a-fA-F]
   \w                   match alphanum or _      [a-zA-Z0-9_]
   \W                   match non alphanum or _  [^a-zA-Z0-9_]
   \s                   match whitespace         space and tab
   \S                   match non whitespace     other than space or tab

      Multiple and Saving Patterns
      ----------------------------
   \|                   match any regex separated by \|
                           /hand\(y\|ful\)      matches 'handy' or 'handful'
   \(...\)              Saves regex enclosed between \( and \) into a hold
                        buf.  Up to nine regexes can be saved
                           \(that\) or \(this\)
                        saves 'that' in buf 1 and saves 'this' in buf 2.
                        Held regexes can be 'replayed' in substitutions by
                        sequences \1 to \9 on the same line.
                           :%s/\(that\) or \(this\)/\2 or \1/

      Word Boundary
      -------------
   \<...\>              Matches chars at the begin or at the end of a word.
                        Word boundaries are determined by punct or space.

      Search Pattern Modifiers
      ------------------------
   \v                   helps avoid \ for regex qualifiers, grouping
                        regex, etc.
                           /\vc{5}        match exactly 'ccccc'
                           /\vabc+        match 'abc' or 'abccc', not 'ab'
                           /\vabc?        match 'ab' or 'abc'
                           /\v<his>       match whole word 'his', not 'this'
                           /\vmin|max     match 'min' or 'max'
                           /\vhand(y|ful) match 'handy' or 'handful'
                           /\v(\a)\1      match repeated alphas
   \V                   No neeed to use \ when match special chars
                           \V^.*$         matches '^.*$'
   \c                   match case insensitive
                           \cthis         matches 'this', 'This', 'thiS', ...
   \C                   match case sensitive
   \%V                  match only in area in a visual selection

      Metacharacters For Replacement Strings
      --------------------------------------
   \t                   replacestring <TAB> horizontal tab
   \n                   <LF> replacestring line feed
   \r                   <NL> replacestring newline
   \u or \l             change next char to upper/lower case
   \U or \L             change next chars to upper/lower case
   \e or \E             end further changes in case
                           :% s/\v(\a+)/\u\1/g  Capitalize every word in buf
                           :% s/\v(\a+)/\U\1/g  Capitalize every char in buf
                           :% s/\v(\w)_(\a+)/\1\u\2/g
                                  change camel_case to camelCase
   # ^ $                can be used instead of /


