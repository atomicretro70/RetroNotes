##############################################################################
##############################################################################
##############################################################################
##############################################################################
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######          ##############################################          ######
######          ##############################################          ######
######          ###                                        ###          ######
######          ###              Retro Notes               ###          ######
######          ###                                        ###          ######
######          ###              Modal Logics              ###          ######
######          ###                                        ###          ######
######          ##############################################          ######
######          ##############################################          ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                     AtomicRetro@outlook.com                      ######
######                                                                  ######
######                     Revision:  20.10.05                          ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
##############################################################################
##############################################################################
##############################################################################
##############################################################################

....|....1....|....2....|....3....|....4....|....5....|....6....|....7....|...


==============================
To View This Document Properly
==============================
* Best if viewed in VIM using with settings
     :set columns=80
     :set encoding=utf-8

* This document must be viewed with a mono-spaced font to enjoy the layout,
  tables and diagrams.

* This document must be viewed in an editor that can display unicode utf-8.


========
Contents
========

   Contents
   Preface
   Introduction
   Truth-Functional Logic
      Language
      Semantics
      Truth-Functional Calculus
      Proofs
   Alethic Modal Logic
      Language
      Semantics
      Alethic Deduction - Axiomatic
      Alethic Deduction - □ Based Natural Deduction
      Alethic Deduction - ◇ Based Natural Deduction
      Alethic Deduction - Relative Modalities
      Alethic Deduction - Non-Historical Systems
      Modal Truth-Trees
   Deontic Modal Logic
      Language
      Semantics
      Deontic Deduction (Standard Deontic Logic)
      Deontic Deduction (Augmented Standarad Deontic Logic)
      Deontic Reductionism
   Temporal Modal Logic
      Language
      Semantics
      Inferential Systems
   Doxastic & Epistemic Modal Logics
      Language
      Semantics
      Inferential Systems
   Relating the Systems
   FOL=
   Modal FOL=
   Higher-Order Logics
   Free Logic (FL=)
      Modal extensions of FL=

   Appendix A: TFL Proofs


=======
Preface
=======

   I wrote these books for anyone who needs a reference in logic.
   The concepts are presented concisely but clearly with all necessary
   detail.  Nevertheless, the information density is higher than would
   be found in a textbook.

   The first chapter of this book introduces an austere Truth-Functional
   logic.  This logic will be used throughout the book to illustrate concepts.
   Subsequent chapters cover various modal logics starting with alethic logic
   (the logic of necessary and possible), then deontic logic which covers the
   concepts of obligatory and permissible.  Next is temporal logic and finally
   doxastic (belief) and epistemic (knowledge) logics are introduced together.
   Modal TFL is expanded to Modal FOL=.  We round out the book with
   introductions to various other logical systems.

   The reader ought to be aware of some conventions used in this book.  When
   a term is defined, it will appear in all capital letters to facilitate
   searching.  A pair of asterisks denote italics.  Single quotes will denote
   a mention, vs. a use, of a symbol.  Most of the time, single quotes will
   be implicit.  Strings surrounded by single quotes denote something
   that is to be taken literally.  To avoid confusion this book ignores
   the usual English grammar rules for punctuation within quotations when
   following the rules can lead to confusion.

   This book will be updated periodically, and some sections may be removed
   or developed further based upon reader feedback.  Please contribute by
   reporting an error or omission or submitting other comments by contacting
   the author here: AtomicRetro@outlook.com.


============
Introduction
============

   At its core logic is about *meaning*.  Yes, it's about argumentation and
   inference, but none of that can happen without regard to meaning.  Logic
   studies those systems whose meaning can be defined with mathematical
   precision.  It's only through this deep level of understanding of meaning
   that one can have certainty in logical relationships of statements and
   parts of statements.  "Propositional Logic", the logic of truth-functions
   requires an understanding of valuations and how truth-functions operate
   upon them.  Aristotelian and Predicate Logic require understanding models
   in set theory.  Modal logics requires understanding relationships between
   possible worlds.

   Is Logic Descriptive or Prescriptive?

   This is a central concern in the philosophy of logic.  Many complaints
   come from the fact that logic doesn't reflect natural language common
   sensical reasoning.


======================
Truth-Functional Logic
======================

   Here we'll introduce an austere Fitch-Style Logic & Calculus.  The system
   has just two operators, but a more robust system can be derived from it.


--------
Language
--------

Lexemes
=======

   Non-Logical Symbols
      Proposition Symbols:      A...Z

   Logical Symbols
      Truth-Function Symbols:   →, ⊥
      Association Symbols:      (, )

Grammar
=======

   An ATOMIC FORMULA is either ⊥ or any proposition symbol.

   1.  Every atomic formula is a wff;
   2.  if Φ,Ψ  are wffs, then (Φ → Ψ) is a wff;
   3.  nothing else is a wff.

   Notes

   - To aid readability of wffs I adopt the convention that if a wff
     that begins with '(', I will drop the outer-most pair of parenthesis.

   - In practice it's common to use tick marks or numerical subscripts
     (we use postscripts) after the proposition symbol to increase
     the number of available symbols.

Definitions
-----------

   We define the remaining truth-functions as follows:

         Def -:    -P         =df  (P → ⊥)
         Def ∧:    (P ∧ Q)    =df  -(P → -Q)
         Def ∨:    (P ∨ Q)    =df  (-P → Q)
         Def ↔:    (P ↔ Q)    =df  ((P → Q) ∧ (Q → P))


---------
Semantics
---------

Valuation Function
==================

   The valuation function v for our minimal TFL is defined as follows:

         v(⊥)      = false
         v(P → Q)  = true  if P is false or Q is true;
                     false if P is true and Q is false


-------------------------
Truth-Functional Calculus
-------------------------

Regarding Notation
==================

   'Φ(Ψ)' denotes a wff Φ contains one or more occurrences of a sub-wff Ψ.

   'Φ(Θ/Ψ)' denotes the result of replacing one or more occurrences of Ψ in Φ
   with Θ.  Θ/Ψ is read, "Θ replaced one or more occurrences of Ψ".

   'Φ(Θ//Ψ)' like above but indicates replacing all occurrences of Ψ in Φ
   with Θ.  Θ//Ψ is read, "Θ replaced all occurrences of Ψ".

   '( Φ ⊢ Ψ )' denotes a subproof with hypothesis Φ concluding with Ψ.

   '[ ... ]' denotes that the enclosed must exist, be defined or proved
   elsewhere (external to the current proof).

Primitive Inference Rules
=========================
 
   ================================  =========================================
   Name/Alternate Names              Rule
   ================================  =========================================
   Assumption (A)                    Introduce a premise at any step.

   Hypothesis (H)                    Introduce a hypothesis at any step
                                     provided it begins a new subproof.

   Axiom (Ax)                        Introduce an axiom at any step.

   Conditional Elimination (→ E)     From Φ → Ψ and Φ, infer Ψ; all within
      Modus Ponens (MP)              the same subproof.

   Conditional Introduction (→ I)    From a subproof with hypothesis Φ
      Conditional Proof (CP)         and ending Ψ, close the subproof,
                                     and infer Φ → Ψ.

   Negation Elimination (-E)         From --Φ, infer Φ; all within the
                                     same subproof.

   Reiterate (RE)                    From Φ, infer Φ into the same subproof,
                                     or into an immediately nested subproof.

   Equivalence Substitution (EQ)     From [ Φ ↔ Ψ ], and Θ(Φ), infer Θ(Ψ/Φ);
                                     or from [ Φ ↔ Ψ ] and Θ(Ψ), infer Θ(Φ/Ψ).
   ================================  =========================================

   Note: Apart from RE we can only appeal to lines in the current subproof.

   These rules are sometimes expressed in diagrams.  Horizontal lines denote
   'infer', vertical lines denote subproofs.  Some rules have
   multiple forms.

      +-------------------------------+-------------------------------+
      | ============================= | ============================= |
      |  A                            |  H                            |
      | ============================= | ============================= |
      |                               |                               |
      |  ---                          |  -------                      |
      |   Φ   (Φ is a premise)        |   |   Φ   (Φ is a hypothesis) |
      |                               |                               |
      | ============================= | ============================= |
      |  → E                          |  → I                          |
      | ============================= | ============================= |
      |   Φ → Ψ                       |   |   Φ                       |
      |   Φ                           |   |   ...                     |
      |  ---------                    |   |   Ψ                       |
      |   Ψ                           |  ---------                    |
      |                               |   Φ → Ψ                       |
      |                               |                               |
      | ============================= | ============================= |
      |  -E                           |  EQ (Equiv. Substitution)     |
      | ============================= | ============================= |
      |   --Φ                         |   [ Φ ↔ Ψ ]      [ Φ ↔ Ψ ]    |
      |  -----                        |   Θ(Φ)           Θ(Ψ)         |
      |   Φ  (all in one subproof)    |  -------------  ------------- |
      |                               |   Θ(Ψ/Φ)         Θ(Φ/Ψ)       |
      |                               |                               |
      | ============================= | ============================= |
      |  RE                           |  Ax                           |
      | ============================= | ============================= |
      |   Φ         Φ                 |                               |
      |  ---       ---------          |  ---                          |
      |   Φ         |   ...           |   Φ   (Φ is an axiom)         |
      |             |   Φ             |                               |
      |                               |                               |
      |  (within   (immediately       |                               |
      |  same       nested            |                               |
      |  subproof)  subproof)         |                               |
      |                               |                               |
      +-------------------------------+-------------------------------+

   Equivalence Substitution (EQ) is permitted in Truth-Functional logic.
   It's *not* permitted in Modal Logic because EQ conflicts with the use of
   the intensional modal operators.

Other Justifications
====================

   The following aren't inference rules but do appear in proofs as
   justification for deriving a wff.

   ================================  =========================================
   Name (Abbreviation)               Rule
   ================================  =========================================
   Definition Substitution (DEF)     From [ Φ =df Ψ ], Θ(Φ), infer Θ(Ψ/Φ);
                                     and from [ Φ =df Ψ ], Θ(Ψ), infer Θ(Φ/Ψ).
   ================================  =========================================

   Notice that in the rules the definition is in brackets '[' and ']'.
   Brackets indicate that the definition needs to exist but doesn't need
   to appear in the proof to be applied.

Derived Inference Rules
=======================

   Once proven a sequent may be used as a new inference rule.  Every instance
   of a valid inference rule is a valid deduction.  If a sequent
   is proven valid, then all instances of the sequent are also valid.  This
   property allows us to derive additional Fitch-style inference rules.

   Deriving Fitch

   Additional Fitch style inference rules are listed here.  The order of these
   rules is important since later rules depend upon earlier rules having been
   proven.  All of the important derived rules, theorems and equivalences are
   easier to prove if we first prove these.

   ================================  =========================================
   Name                              Sequent
   ================================  =========================================
   Negation Rules
      -I                             ( P   ⊢  ⊥ )  ⊢  -P
      -I                             ( -P  ⊢  ⊥ )  ⊢  P

   Conjunction Rules
      ∧E                             P ∧ Q  ⊢  Q
      ∧E                             P ∧ Q  ⊢  P
      ∧I                             P, Q  ⊢  P ∧ Q

   Disjunction Rules
      ∨E                             P ∨ Q, P → R, Q → R  ⊢  R
      ∨I                             P  ⊢  P ∨ Q
      ∨I                             P  ⊢  Q ∨ P

   Biconditional Rules
      ↔ E                            P ↔ Q  ⊢  P → Q
      ↔ E                            P ↔ Q  ⊢  Q → P
      ↔ I                            P → Q, Q → P  ⊢  P ↔ Q
      ↔ I                            P → Q, Q → P  ⊢  Q ↔ P
   ================================  =========================================

   Other Important Derived Rules

   ================================  =========================================
   Name (Abbreviation)               Sequent
   ================================  =========================================
   Ex Falso Quodlibet (EFQ)          P, -P  ⊢  Q
   Modus Tollens (MT)                P → Q, -Q  ⊢  -P
   Hypothetical Syllogism (HS)       P → Q, Q → R  ⊢  P → R
   Absorption (Abs)                  P → Q  ⊢  P → (P ∧ Q)
   Constructive Dilemma (CD)         P ∨ Q, P → R, Q → S  ⊢  R ∨ S
   Destructive Dilemma (DD)          P → Q, R → S, -Q ∨ -S  ⊢  -P ∨ -Q
   Bidirectional Dilemma (BD)        P → Q, R → S, P ∨ -S  ⊢  Q ∨ -R
   Disjunctive Syllogism (DS)        P ∨ Q, -P  ⊢  Q
   Disjunctive Syllogism (DS)        P ∨ Q, -Q  ⊢  P
   Theorem (THM)                     [ ⊢ P ]  ⊢  P
   ================================  =========================================

Theorems
========

   A theorem of propositional calculus is a derived rule which has no premises
   or undischarged hypotheses.  Theorems are the tautologies of propositional
   logic.  A sequent for a theorem Φ has the form below.  A theorem of our
   calculus is provable by starting its proof with a hypothesis or with
   a previously proved theorem.

         ⊢ Φ

Equivalences
============

   An equivalence is a theorem whose main operator is a biconditional.
   The following are traditionally important equivalences derivable
   in our system.

         ⊢ Φ ↔ Ψ

   ================================  =========================================
   Name (Abbreviation)               Sequent
   ================================  =========================================
   Double Negation (DN)              ⊢  P ↔ --P
   Idempotence (IDEM)                ⊢  P ↔ (P ∧ P)
   Idempotence (IDEM)                ⊢  P ↔ (P ∨ P)
   Transposition (TRANS)             ⊢  (P → Q) ↔ (-Q → -P)
   Material Implication (MI)         ⊢  (P → Q) ↔ (-P ∨ Q)
   Association (ASSOC)               ⊢  (P ∧ (Q ∧ R)) ↔ ((P ∧ Q) ∧ R)
   Association (ASSOC)               ⊢  (P ∨ (Q ∨ R)) ↔ ((P ∨ Q) ∨ R)
   Commutation (COM)                 ⊢  (P ∧ Q) ↔ (Q ∧ P)
   Commutation (COM)                 ⊢  (P ∨ Q) ↔ (Q ∨ P)
   Commutation (COM)                 ⊢  (P ↔ Q) ↔ (Q ↔ P)
   Exportation (EXP)                 ⊢  ((P ∧ Q) → R) ↔ (P → (Q → R))
   Distribution (DIST)               ⊢  (P ∧ (Q ∨ R)) ↔ ((P ∧ Q) ∨ (P ∧ R))
   Distribution (DIST)               ⊢  (P ∨ (Q ∧ R)) ↔ ((P ∨ Q) ∧ (P ∨ R))
   DeMorgan's law (DM)               ⊢  -(P ∧ Q) ↔ (-P ∨ -Q)
   DeMorgan's law (DM)               ⊢  -(P ∨ Q) ↔ (-P ∧ -Q)
   Material Equivalence (ME)         ⊢  (P ↔ Q) ↔ ((P → Q) ∧ (Q → P))
   Material Equivalence (ME)         ⊢  (P ↔ Q) ↔ ((P ∧ Q) ∨ (-P ∧ -Q))
   ================================  =========================================

   Equivalence Theorem Substitution

   This handy device is a problem for modal logic.  Equivalences can be used
   to swap instances of one side of the equivalence in wffs, with the
   corresponding instances of the other side.  This handy inference rule
   isn't going to be valid once we add Modal Logic.  So we're not permitting
   it at all.

   @@@ It may be possible to still use these provided the thing being
   rewritten is not the main operator under □  or ◇ .


------
Proofs
------

Negation Derivations
--------------------

   These rules must be proven schematically because they describe
   new kinds of reasoning with subproofs.

   -I:   ( P  ⊢  ⊥ )  ⊢  -P
   Schematic Proof
    i.    |   P                        H (for -I)
          |   ...
    j.    |   ⊥
    j+1.  P → ⊥                        i-j → I
    j+2.  -P                           j+1 Def -
   QED

   -I:   ( -P  ⊢  ⊥ )  ⊢  P
   Schematic Proof
    i.    |   -P                       H (for -I)
          |   ...
    j.    |   ⊥
    j+1.  -P → ⊥                       i-j → I
    j+2.  --P                          j+1 Def -
    j+3.  P                            j+2 -E
   QED

   DN:   ⊢  P ↔ --P
   Proof
   01.   |   P                         H (for → I)
   02.   |   |   -P                    H (for -I)
   03.   |   |   P → ⊥                 2 Def -
   04.   |   |   P                     1 RE
   05.   |   |   ⊥                     3,4 → E
   06.   |   --P                       2-5 -I
   07.   P → --P                       1-6 → I
   08.   |   --P                       H (for → I)
   09.   |   P                         8 -E
   10.   --P → P                       8-9 → I
   11.   P ↔ --P                       7,10 ↔ I
   QED

   Ex Falso Quodlibet (EFQ):   P, -P  ⊢  Q
   Proof
   01.   P                             A
   02.   -P                            A
   03.   |   -Q                        H (for -I)
   04.   |   P                         1 RE
   05.   |   -P                        2 RE
   06.   |   P → ⊥                     5 Def -
   07.   |   ⊥                         4,6 → E
   08.   Q                             3-7 -I
   QED

Conditional Derivations
-----------------------

   Modus Tollens (MT):   P → Q, -Q  ⊢  -P
   Proof
   01.   P → Q                         A
   02.   -Q                            A
   03.   |   P                         H (for -I)
   04.   |   P → Q                     1 RE
   05.   |   -Q                        2 RE
   06.   |   Q                         3,4 → E
   07.   |   ⊥                         5,6 EFQ
   08.   -P                            3-7 -I
   QED

Conjunction Derivations
-----------------------

   ∧E   P ∧ Q  ⊢  Q
   Proof
   01.   P ∧ Q                         A
   02.   -(P → -Q)                     1 def ∧
   03.   |   -Q                        H (for -I)
   04.   |   |   P                     H (for → I)
   05.   |   |   -Q                    3 RE
   06.   |   P → -Q                    4-5 → I
   07.   |   -(P → -Q)                 2 RE
   08.   |   ⊥                         6,7 EFQ
   09.   Q                             3-8 -I
   QED

   ∧E   P ∧ Q  ⊢  P
   Proof
   01.   P ∧ Q                         A
   02.   -(P → -Q)                     1 Def ∧
   03.   |   -P                        H (for -I)
   04.   |   |   Q                     H (for → I)
   05.   |   |   -P                    3 RE
   06.   |   Q →  -P                   4-5 ->I
   07.   |   |   P                     H (for → I)
   08.   |   |   --P                   7 DN
   09.   |   |   Q → -P                6 RE
   10.   |   |   -Q                    8,9 MT
   11.   |   P -> -Q                   7-11 → I
   12.   |   -(P → -Q)                 2 RE
   13.   |   ⊥                         11,12 EFQ
   14.   --P                           3-13 -I
   15.   P                             14 -E
   QED

   ∧I:   P, Q  ⊢  P ∧ Q
   Proof
   01.   P                             A
   02.   Q                             A
   03.   |   P → -Q                    H (for -I)
   04.   |   P                         1 RE
   05.   |   Q                         2 RE
   06.   |   -Q                        3,4 → E
   07.   |   ⊥                         5,6 EFQ
   08.   -(P → -Q)                     3-7 -I
   09.   P ∧ Q                         8 Def ∧
   QED

Disjunction Derivations
-----------------------

   ∨E/Poof by Cases (PBC):   P ∨ Q, P → R, Q → R  ⊢  R
   Proof
   01.   P ∨ Q                         A
   02.   P → R                         A
   03.   Q → R                         A
   04.   -P → Q                        1 def ∨
   05.   |   -R                        H (for -I)
   06.   |   P → R                     2 RE
   07.   |   Q → R                     3 RE
   08.   |   -P → Q                    4 RE
   09.   |   -P                        5,6 MT
   10.   |   -Q                        5,7 MT
   11.   |   Q                         8,9 → E
   12.   |   ⊥                         10,11 EFQ
   13.   R                             5-12 -I
   QED

   ∨I:   P  ⊢  P ∨ Q
   Proof
   01.   P                             A
   02.   |   -(P ∨ Q)                  H (for -I)
   03.   |   -(-P → Q)                 2 Def ∨
   04.   |   (-P → Q) → ⊥              3 Def -
   05.   |   P                         1 RE
   06.   |   |   -P                    H (for → I)
   07.   |   |   P                     5 RE
   08.   |   |   Q                     6,7 EFQ
   09.   |   -P → Q                    6-8 → I
   10.   |   ⊥                         2,9 EFQ
   11.   P ∨ Q                         2-10 -I
   QED

   ∨I:   P  ⊢  Q ∨ P
   Proof
   01.   P                             A
   02.   P ∨ Q                         1 ∨I
   03.   |   -(Q ∨ P)                  H (for -I)
   04.   |   -(-Q → P)                 3 Def ∨
   05.   |   (-Q → P) → ⊥              4 Def -
   06.   |   P                         1 RE
   07.   |   |   -Q                    H (for → I)
   08.   |   |   P                     6 RE
   09.   |   -Q → P                    7-8 → I
   10.   |   ⊥                         4,9 EFQ
   11.   Q ∨ P                         3-10 -I
   QED

Biconditional Derivations
-------------------------

   ↔ E:   P ↔ Q  ⊢  P → Q
   Proof
   01.   P ↔ Q                         A
   02.   (P → Q) ∧ (Q → P)             1 Def ↔
   03.   P → Q                         2 ∧E
   QED

   ↔ E:   P ↔ Q  ⊢  Q → P
   Proof
   01.   P ↔ Q                         A
   02.   (P → Q) ∧ (Q → P)             1 Def ↔
   03.   Q → P                         2 ∧E
   QED

   ↔ I:   P → Q, Q → P  ⊢  P ↔ Q
   Proof
   01.   P → Q                         A
   02.   Q → P                         A
   04.   |   -(P ↔ Q)                  H (for -I)
   05.   |   -((P → Q) ∧ (Q → P))      4 Def ↔
   06.   |   ((P → Q) ∧ (Q → P)) → ⊥   5 Def -
   07.   |   P → Q                     1 RE
   08.   |   Q → P                     2 RE
   09.   |   (P → Q) ∧ (Q → P)         7,8 ∧I
   10.   |   ⊥                         6,9 → E
   11.   P ↔ Q                         4-10 -I
   QED

   ↔ I:   P → Q, Q → P  ⊢  Q ↔ P
   Proof
   01.   P → Q                         A
   02.   Q → P                         A
   03.   |   -(Q ↔ P)                  H (for -I)
   04.   |   (Q ↔ P) → ⊥               3 Def -
   05.   |   ((Q → P) ∧ (P → Q)) → ⊥   4 Def ↔
   06.   |   Q → P                     2 RE
   07.   |   P → Q                     1 RE
   08.   |   (Q → P) ∧ (P → Q)         6,7 ∧I
   09.   |   ⊥                         5,8 → I
   10.   Q ↔ P                         3-9 ↔ I
   QED


===================
Alethic Modal Logic
===================

   Alethic modal logic studies the concepts of 'it's necessary that, P'
   symbolized □ P, and 'it's possible that, P' symbolized ◇ P.


--------
Language
--------

Lexemes
=======

   Non-Logical Symbols
      Proposition Symbols:      A...Z

   Logical Symbols
      Truth-Function Symbols:   →, ⊥
      Association Symbols:      (, )
      Modal Symbols:            □

Grammar
=======

   An ATOMIC FORMULA is either ⊥ or any proposition symbol.

   1.  every atomic formula is a wff;
   2.  if Φ,Ψ  are wffs, then (Φ → Ψ) is a wff;
   3.  if Φ is a wff, then □ Φ is also a wff;
   4.  nothing else is a wff.

Definitions
-----------

         Def -:    -P         =df  (P → ⊥)
         Def ∧:    (P ∧ Q)    =df  -(P → -Q)
         Def ∨:    (P ∨ Q)    =df  (-P → Q)
         Def ↔:    (P ↔ Q)    =df  ((P → Q) ∧ (Q → P))
         Def -<:   (P -< Q)   =df  □ (P → Q)
         Def >-<:  (P >-< Q)  =df  (P -< Q) ∧ (Q -< P)

   The symbols '-<' and '>-<' are called strict conditional and strict
   biconditional respectively.

---------
Semantics
---------

Kinds of Necesssity
===================

   1. logical necessity: a true statement in virtue of logic alone.
      ie. tautologies and validities.

   2. metaphysical necessity: true in virtue of the structure of reality.
      eg. Contradictions are necessarily false.

   3. lawful/nomological/causal/scientific/physical necessity:
      true in virtue of the laws of nature.  (eg. the speed of light).
         nomological =df  relating to or denoting certain principles, such
                          as laws of nature, that are neither logically
                          necessary nor theoretically explicable, but are
                          simply taken as true.

Translation Hints
=================

   +-----------------------------------------------------------------------+
   | =================================   ================================= |
   | P                                 |                                   |
   | ================================= | ================================= |
   | P                                 |                                   |
   | it's true that, P                 |                                   |
   | it's the case that, P             |                                   |
   | P is true in the actual world     |                                   |
   |                                   |                                   |
   | ================================= | ================================= |
   | ◇ P                               | □ P                               |
   | ================================= | ================================= |
   | it's possible that, P             | it's necessary that, P            |
   | P is logically possible           | P is logically necessary          |
   |      (not self-contradictory)     |      (self-contradictory to deny) |
   | P is true in some possible world  | P is true in all possible worlds  |
   | P is consistent                   | P must be true                    |
   | P could be true                   | P has to be true                  |
   |                                   |                                   |
   | ================================= | ================================= |
   | - ◇ P                             | - □ P                             |
   | ================================= | ================================= |
   | P is not possible                 | P is not necessary                |
   | P is impossible                   | P is unnecessary                  |
   |                                   |                                   |
   | ================================= | ================================= |
   | ◇ (P ∧ Q)                         | - ◇ (P ∧ Q)                       |
   | ================================= | ================================= |
   | It's possible that both P and Q   | P is logically inconsistent       |
   | P is logically compatible with Q  |      with Q                       |
   | P is logically consistent with Q  |                                   |
   |                                   |                                   |
   | ================================= | ================================= |
   | (◇ P ∧ ◇ -P)                      | (P ∧ ◇ -P)                        |
   | ================================= | ================================= |
   | P is a contingent statement       | P is a contingent truth           |
   |                                   | P happens to be the case, but     |
   |                                   |      could have been false        |
   |                                   |                                   |
   | ================================= | ================================= |
   | □ (P → Q)                         |                                   |
   | ================================= | ================================= |
   | P entails Q                       |                                   |
   | P strictly implies Q              |                                   |
   |                                   |                                   |
   +-----------------------------------------------------------------------+

Strict Conditional
==================

   Propositional logic appears to have a flaw.  For many philosophers
   conditionals don't always make intuitive sense; especially when they
   are negated.

         K → F,        If you keep up the good work, then you'll go far.

         -(K → F),     It's false that if you keep up the work, you'll go far.
         -(-K ∨ F),    Material Implication
         K ∧ -F,       DeMorgan's
                       You keep up the good work and you don't go far.

   C.I.Lewis felt this conclusion didin't make sense for a negated
   conditional.  His goal in creating alethic modal logic was to find
   a way to *fix* the conditional.  For Lewis all if/then statements
   ought to be translated as strict conditionals.  Observe what happens
   when we use the strict conditional instead of the propositional logic
   conditional.

         (K -< F)      If you keep up the good work, you'll go far.

         -(K -< F)
         -□ (K → F)    Definition of -<
         -□ --(K → F)  Double Negation
         ◇ -(K → F)    Definition of ◇ (◇ P =df -□ -P)
         ◇ -(-K ∨ F)   Material Implication
         ◇ (K ∧ -F)    DeMorgan's
                       It's possible you keep up the good work and don't
                          go far.

   The conclusion is similar to before but is prefixed by ◇.

Ambiguous Conditionals
======================

   "Necessarily, if P then Q."                        (unambiguous)

         Possible Translations
            □ (P → Q)

   "If P then Q (by itself) is necessary."            (unambiguous)

         Possible Translations
            (P → □ Q)

   "If P then it's necessary (must be) that Q."       (ambiguous)

         Possible Translations
            (P → □ Q)    
            □ (P → Q)

   "If P then it's impossible (couldn't be) that Q."  (ambiguous)

         Possible Translations
            (P → □ -Q)
            □ (P → -Q)

   This is the alethic version of Chisholm's paradox (which is
   expressed in deontic logic).

Modal Square Of Opposition
==========================

   The modal square has the same relationships found in Aristotle's
   square.

     □ P-----------□ -P
       | \       / |
       |   \   /   |
       |     X     |
       |   /   \   |
       | /       \ |
     ◇ P-----------◇ -P

   CONTRADICTORY forms (diagonals) have opposite truth values.

   CONTRARY forms (the two top forms) can't both the true.

   SUBCONTRARY forms (the two bottom forms) can't both be false.

   SUBALTERNATE forms (the left or right side) are like conditionals.  If
   the form on top is true then the form on the bottom is true.

Extension & Intension
=====================

   Extensional Contexts

   The EXTENSION of a proposition is its truth-value, the extension of a
   predicate is the class of things to which it applies, and the
   extension of a constant object symbol is what the symbol denotes (its
   bearer).

   In classical logics, starting from a given statement, it is always possible
   to infer what results from replacing a subexpression in that statement with
   one with the same extension.  So,

      TFL   From R(P) and P ↔ Q, we can always infer R(Q/P)

      FOL   From R(F) and ∀x(Fx ↔ Gx), we can always infer R(G/F)

      FOL=  From R(a) and a=b, we can always infer R(b/a)

   Intensional Contexts

   The INTENSION of a sentence is the thought or proposition it expresses,
   the intension of a predicate is the property, concept or idea it
   represents, and the intension of an object symbol is its meaning,
   sense or the individual concept it used to pick out its bearer.

   When it comes to an operator like □ , replacing an expression with another
   having the same extension can result in different truth values.  These are
   called intensional contexts, since in these contexts, intension matters,
   not just extension.  So,

         □ (2+2=4)                        is true but,
         □ (Mercury is the first planet)  is false

         □ (8>7)                          is true but,
         □ (number of planets>7)          is false

   INTENSIONAL OPERATORS (such as □ and ◇ ) generate INTENSIONAL CONTEXTS.

   @@@It seems that we may be able to permit extension substitutions as
   described above provided they are not performed on the top-level wff
   that is the argument of a modal operator.  It may still be ok to do
   internally.

Kripke Semantics
================

   Kripke semantics describes a way to understand possible worlds.  Kripke
   defined a new semantic concept called an ACCESSIBILITY RELATION (AR)
   between two worlds.

      The accessibility relation (AR)
         wxRwy     means world wx can access world wy, 

   You can think of the accessibility relation as an arrow pointing from wx to
   wy indicating its direction.

   Reflexivity
      If exists wx then wxRwx.   (Allows □ P to assert P in the current world)

   Symmetry
      If wxRwy then wyRwx.       (Every accessibility arrow is double ended)

   Transitivity
      If wxRwy and wyRwz then wxRwz.   (□ P can traverse a series of ARs)

   System M/T = K + refl                      □ A → A (axiom M/T) = K + M
   System B   = K + refl + symmetry           A → □ ◇ A (axiom B)
   System S4  = K + refl + trans              □ A → □ □ A (axiom 4)
   System S5  = K + refl + symmetry + trans   ◇ A → □ ◇ A (axiom 5)

   In S5 every world has access to every other world.

   Kinds of Accessibility Relations

   Reflexive           Ref(R)    =df ∀x(∃y(xRy ∨ yRx) → xRx)
   Completely Reflex   CRef(R)   =df ∀x(xRx)
   Transitive          Trans(R)  =df ∀x∀y∀z((xRy ∧ yRz) → xRz)
   Symmetric           Sym(R)    =df ∀x∀y(xRy → yRx)
   serial              Ser(R)    =df ∀x∃yxRy
   Irreflexive         Irref(R)  =df -∃x(xRx)
   Euclidean           Euc(R)    =df ∀x∀y∀z((xRy ∧ xR) → yRz)
   Incestual           Incest(R) =df ∀x∀y∀z((xRy ∧ xRz) → ∃w(yRw ∧ zRw))
   Asymmetric          Asym(R)   =df ∀x∀y(xRy → -(yRx))
   Anti-Symmetric      Anti(R)   =df ∀x∀y((xRy ∧ yRx) → x=y)
   Universal           Univ(R)   =df ∀x∀y(xRy)
   Identity            Iden(R)   =df ∀x∀y(xRy → x=y)
   Functional          Fun(R)    =df ∀x∀y∀z((xRy ∧ xRz) → y=z)
   Inverse-Functional  I-Fun(R)  =df ∀x∀y∀z((xRz ∧ yRz) → x=y)
   Strongly Connected  SCon(R)   =df ∀x∀y(xRy ∨ yRx)
   Weakly Connected    WCon(R)   =df ∀x∀y(-x=y → (xRy ∨ yRx))
   Non-Convergent      N-Con(R)  =df ∀x∀y∀z(((xRz ∧ yRz) ∧ -x=y) → xRy ∨ yRx)
   Non-Divergent       N-Div(R)  =df ∀x∀y∀z((xRy ∧ xRz ∧ -y=z) → (yRz ∨ zRy))
   Equiv Relation      Equ(R)    =df CRef(R) ∧ Trans(R) ∧ Sym(R)
   Quasi-Ordering      QOrd(R)   =df CRef(R) ∧ Trans(R)
   Partial Ordering    POrd(R)   =df QOrd(R) ∧ Anti(R)
   Refl Linear Order   RLOrd(R)  =df POrd(R) ∧ SCon(R)
   Irrefl Linear Ord   ILOrd(R)  =df Asym(R) ∧ Trans(R) ∧ W-Con(R)
   Tree-Ordering       Tree(R)   =df POrd(R) ∧ N-Conv(R)
   Root-Ordering       Root(R)   =df POrd(R) ∧ N-Div(R)
   Upper-Bounded       UBound(R) =df ∀x∀y((∃z(xRz) ∧ ∃z(yRz)) → ∃z(xRz ∧ yRz))
   Lower-Bounded       LBound(R) =df ∀x∀y((∃z(zRx) ∧ ∃z(zRy)) → ∃z(zRx ∧ zRy))
   Bounded             Bound(R)  =df UBound(R) ∧ LBound(R)
   Dense               Dense(R)  =df ∀x∀z( (xRz ∧ -x=z)
                                           → ∃y(-x=y ∧ -y=z ∧ xRy ∧ yRz) )


-----------------------------
Alethic Deduction - Axiomatic
-----------------------------

This and several sections to follow present different alethic modal deduction
formulations.  These formulations are equivalent in that they prove all the
same arguments.  They are presented here to illustrate some of the various
ways modal deduction can be formulated.  The first formulation is an axiomatic
formulation and is widely regarded as the definitive system.  The remaining
sections introduce various natural deduction formulations.

The exact combination of rules of inference for alethic logic is
controversial.  We shall examine some well known rules and systems.

Rules, Definitions and Axiom Schemata
=====================================

   Various combinations of the following rules are taken to form various
   inferential systems of alethic modal logic.

   (Def ◇) Definition of ◇ 
         ◇ P =df -□ -P

   (NR) Necessitation Rule
         if ⊢ P then infer □ P

   (K) Axiom Schema K (Kripke, Modal Distribution)
         □ (P → Q) → (□ P → □ Q)

   (M)/(T) Axiom Schema M/T (Modality)
         □ P → P

   (B) Axiom Schema B (L.E.J.Brouwer)
         P → □ ◇ P

   (4) Axiom Schema 4 (C.I.Lewis' Modal Axiom 4)
         □ P → □ □ P

   (5) Axiom Schema 5 (C.I.Lewis' Modal Axiom 5)
         ◇ P → □ ◇ P

Alethic Inferential Systems
===========================

   The following table describes each system according to the rules it has.
   A proof is always constructed entirely in a single system.

         ==========  ===================
         Rule/Axiom  System
                     K   M   B   S4   S5
         ==========  ===================
         (Def ◇)     *   *   *   *    *
         (NR)        *   *   *   *    *
         (K)         *   *   *   *    *
         (M)             *   *   *    *
         (B)                 *                      
         (4)                     *    
         (5)                          *
         ==========  ===================

   Notes

   - System K is weakest possible system (proves the fewest things);
     S5 is strongest possible system; between are an infinite number of
     systems.
   - System M is commonly used.

   Composition of Systems

   System K    = (Def ◇) + (NR) + (K)
   System M    = System K + (M)
   System B    = System K + (M) + (B)
   System S4   = System K + (M) + (4)
   System S5   = System K + (M) + (5)              ( (5) = (4) + (B) )
               = System K + (M) + (4) + (B)


---------------------------------------------
Alethic Deduction - □ Based Natural Deduction
---------------------------------------------

System K
========
   
   We will start with Truth-Functional Logic and Calculus above, add a
   clause to the grammar to accommodate the alethic modal operators ◇ and
   □ , then build our inference rules on top of that to produce a system
   equivalent to System K.

   A BOXED SUBPROOF is a subproof that begins with □  *instead* of
   a hypothesis.  Informally, the □  header indicates that every line within
   the subproof is necessarily true.

   The calculi on top of Alethic Modal logic are defined by the following
   rules.  Notice that some old rules are redefined here while new principles
   are added.  All remaining rules such as those of Truth-Functional Calculus
   must occur entirely within a given world.  In this formulation axiom K and
   the necessitation rule follow naturally as theorems.

   ================================  =========================================
   Name/Alternate Names              Rule   
   ================================  =========================================
   Hypothesis (H for □ I)            Introduce a hypothesis at any step
                                     provided it begins a new subproof.  The
                                     hypothesis can be '□ ' introducing
                                     a BOXED SUBPROOF.

   Reiterate (RE)                    From P, infer P into the same subproof,
                                     or into an immediately nested subproof
                                     provided the nested subproof is not a
                                     boxed subproof.

   Equivalence Substitution (EQ)     Not a rule of inference in this
                                     formulation of modal alethic calculus
   --------------------------------  -----------------------------------------
   Definition of ◇ (Def ◇)           ◇ P  =df  - □ - P

   Necessitation Elimination (□ E)   From □ P, infer P into any immediately
                                     nested boxed subproof.

   Necessitation Introduction (□ I)  From a boxed subproof ending in P,
                                     close the subproof and infer □ P.
   ================================  =========================================

   These rules are sometimes represented in diagrams.  The horizontal bar
   denotes 'infer', vertical lines denote subproofs.

      +-------------------------------+-------------------------------+
      | ============================= | ============================= |
      | H                             | RE                            |
      | ============================= | ============================= |
      |                               |   P         P                 |
      |  -------      -------         |  ---       ---------          |
      |   |   P        |□             |   P         |   ...           |
      |                               |             |   P             |
      |  (P is a                      |                               |
      |  hypothesis)                  |  (same     (Immediately nested|
      |                               |  subproof) not boxed subproof)|
      |                               |                               |
      | ============================= | ============================= |
      | Def ◇                         | Equivalence Subst (EQ)        |
      | ============================= | ============================= |
      |                               | !!! Not Allowed !!!           |
      | -----------------             |                               |
      | [◇ P =df - □ - P]             |                               |
      |                               |                               |
      | ============================= | ============================= |
      | □ E                           | □ I                           |
      | ============================= | ============================= |
      |   □ P                         |   |□                          |
      |  ---------                    |   |   ...                     |
      |   |□                          |   |   P                       |
      |   |   ...                     |  ---------                    |
      |   |   P                       |   □ P                         |
      |                               |                               |
      +-------------------------------+-------------------------------+

Beyond System K
===============

   We can add the usual axiom schemata to obtain the remaining systems
   M, B, S4, and S5.

Proofs
======

   In this formulation axiom K and the necessitation rule are theorems
   in System K.

   Modal Distribution (K)  ⊢K  □ (P → Q) → (□ P → □ Q)
   Proof
   01.   |   □ (P → Q)                 A
   02.   |   |   □ P                   H (for → I)
   03.   |   |   □ (P → Q)             1 RE
   04.   |   |   |□                    H (for □ I
   05.   |   |   |   P                 2 □ E
   06.   |   |   |   P → Q             3 □ E
   07.   |   |   |   Q                 5,6 → E
   08.   |   |   □ Q                   4-7 □ I
   09.   |   □ P → □ Q                 2-8 → I
   10.   □ (P → Q) → (□ P → □ Q)       1-9 → I
   QED

   Theorems and axioms can be embedded within a blocked subproof to perform
   the same job as the necessitation rule (NR).

   Proof
   01.   |□                            H (for □ I)
   02.   |   P ∨ -P                    A PL Theorem
   03.   □ (P ∨ -P)                    1-2 □ I
   QED

   ◇ DIST   ⊢K  □ (P → Q) → (◇ P → ◇ Q)
   Proof
   01.   |   □ (P → Q)                 A
   02.   |   |   □ -Q                  H (for → I)
   03.   |   |   □ (P → Q)             1 RE
   04.   |   |   |□                    H (for □ I)
   05.   |   |   |   -Q                2 □ E
   06.   |   |   |   P → Q             3 □ E
   07.   |   |   |   -P                5,6 MT
   08.   |   |   □ -P                  4-7 □ I
   09.   |   □ -Q → □ -P               2-8 → I
   10.   |   -□ -P → -□ -Q             9 TRANS
   11.   |   ◇ P → ◇ Q                 10 DEF ◇ 
   12.   □ (P → Q) → (◇ P → ◇ Q)       1-11 → I
   QED

   The following schematic result is so important I'll call it ◇ Introduction.
   From ◇ P, show in a boxed subproof from P that Q, close both subproofs
   and infer ◇ Q.

   ◇ I     ◇ P, (□  (P ⊢ Q))  ⊢K  ◇ Q
   Schematic Proof
   i.   ◇ P
   j.   |□                             H (for □ I)
   k.   |   |   P                      H (for → I)
   ...
   l.   |   |   Q
   l+1. |   P → Q                      k-l → I
   l+2. □ (P → Q)                      j-l+1 □ I
   l+3. □ (P → Q) → (◇ P → ◇ Q)        l+2 ◇ DIST
   l+4. ◇ P → ◇ Q                      l+2,l+3 → E
   l+5. ◇ Q                            i,l+4 → E
   QED

   ◇ ∧Dist  ⊢K  ◇ (P ∧ Q) → (◇ P ∧ ◇ Q)
   Proof
   01.   |   ◇ (P ∧ Q)                 H (for → I)
   02.   |   |□                        H (for ◇ I)
   03.   |   |   |   P ∧ Q             H
   04.   |   |   |   P                 3 ∧E
   05.   |   ◇ P                       1,2-4 ◇ I
   06.   |   |□                        H (for ◇ I)
   07.   |   |   |   P ∧ Q             H
   08.   |   |   |   Q                 7 ∧E
   09.   |   ◇ Q                       1,6-8 ◇ I
   10.   |   ◇ P ∧ ◇ Q                 5,9 ∧I
   11.   ◇ (P ∧ Q) → (◇ P ∧ ◇ Q)       1-10 → I
   QED

   ⊢K   (□ P ∧ ◇ Q) → ◇ (P ∧ Q)
   Proof
   01.   |   □ P ∧ ◇ Q                 H (for → I)
   02.   |   □ P                       1 ∧E
   03.   |   ◇ Q                       1 ∧E
   04.   |   |□                        H (for ◇ I)
   05.   |   |   |   Q                 H
   06.   |   |   |   P                 2 □ E
   07.   |   |   |   P ∧ Q             5,6 ∧I
   08.   |   ◇ (P ∧ Q)                 3,4-7 ◇ I
   09.   (□ P ∧ ◇ Q) → ◇ (P ∧ Q)       1-8 → I
   QED

   M' (Dual of M):   ⊢   P → ◇ P
   Proof
   01.   |   P                         H (for → I)
   02.   |   □ -P → -P                 Ax M
   03.   |   --P                       1 DN
   04.   |   -□ -P                     2,3 MT
   05.   |   ◇ P                       4 DEF◇ 
   06.   P → ◇ P                       1-5 → I
   QED

   B' (Dual of B):  ⊢B  ◇ □ P → P
   Proof
   01.   |   ◇ □ P                     H (for → I)
   02.   |   |   -P                    H (for -I)
   03.   |   |   -P → □ ◇ -P           Ax B
   04.   |   |   □ ◇ -P                1,2 → E
   05.   |   |   | □                   H (for □ I)
   06.   |   |   |   ◇ -P              4 □ E
   07.   |   |   |   -□ P              6 DUAL
   08.   |   |   □ -□ P                5-7 □ I
   09.   |   |   -◇ □ P                8 DUAL
   10.   |   |   ⊥                     1,9 EFQ
   11.   |   --P                       2-10 -I
   12.   |   P                         11 -E
   13.   ◇ □ P → P                     1-12 → I
   QED

   4' (Dual of 4):  ⊢S4  ◇ ◇ P → ◇ P
   Proof
   01.   |   ◇ ◇ P                     H (for → I)
   02.   |   |   -◇ P                  H (for -I)
   03.   |   |   □ -P                  2 DUAL
   04.   |   |   □ -P → □ □ -P         Ax 4
   05.   |   |   □ □ -P                3,4 → E
   06.   |   |   □ --□ -P              5 DN
   07.   |   |   □ -◇ P                6 DEF◇ 
   08.   |   |   ◇ ◇ P                 1 RE
   09.   |   |   -□ -◇ P               8 DEF◇ 
   10.   |   |   ⊥                     7,9 EFQ
   11.   |   --◇ P                     2-10 -I
   12.   |   ◇ P                       11 -E
   13.   ◇ ◇ P → ◇ P                   1-12 → I
   QED

   Steps 2-6 demonstrate that from □ P one can infer □ P into a boxed
   subproof without losing the □ .

   5' (Dual of 5):  ⊢S5  ◇ □ P → □ P
   Proof
   01.   |   ◇ □ P                     H (for → I)
   02.   |   |   -□ P                  H (for -I)
   03.   |   |   ◇ -P                  2 DUAL
   04.   |   |   ◇ -P → □ ◇ -P         Ax 5
   05.   |   |   □ ◇ -A                3,4 → E
   06.   |   |   |□                    H (for □ I)
   07.   |   |   |   ◇ -P              5 □ E
   08.   |   |   |   -□ P              7 DUAL
   09.   |   |   □ -□ P                6-8 □ I
   10.   |   |   ◇ □ P                 1 RE
   11.   |   |   -□ -□ P               10 DEF◇ 
   12.   |   |   ⊥                     9,11 EFQ
   13.   |   --□ P                     2-12 -I
   14.   |   □ P                       13 -E
   15.   ◇ □ P → □ P                   1-15 → I
   QED

   Steps 3-7 demonstrate that from ◇ P one can infer ◇ P into a boxed
   subproof without losing the ◇  provided we are in system S5.

      ⊢S5  □ P → □ □ P
   Proof
   01.   □ P → □ ◇ □ P                 Ax B
   02.   |□                            H (for □ I)
   03.   |   ◇ □ P → □ P               Theorem 5'
   04.   □ (◇ □ P → □ P)               2-3 □ I
   05.   □ (◇ □ P → □ P) → (□ ◇ □ P → □ □ P)  Ax K
   06.   □ ◇ □ P → □ □ P               4,5 → E
   07.   □ P → □ □ P                   1,6 HS
   QED

      ⊢S4  □ P ↔ □ □ P
      ⊢S4  ◇ P ↔ ◇ ◇ P

   But also,

      ⊢S4  □ P ↔ □ □ □ P
   Proof
   01.   □ P → □ □ P                   Ax 4
   02.   □ □ P → □ □ □ P               Ax 4
   03.   □ P → □ □ □ P                 1,2 HS
   04.   □ □ □ P → □ □ P               Ax M
   05.   □ □ P → □ P                   Ax M
   06.   □ □ □ P → □ P                 4,5 HS
   07.   □ P ↔ □ □ □ P                 3,6 ↔ I
   QED

      ⊢S4  ◇ P ↔ ◇ ◇ ◇ P

      ⊢S4  □ (P → □ □ Q) ↔ □ (P → □ Q)
   Proof
   01.   |   □ (P → □ □ Q)
   02.   |   |□                        H (for □ I)
   03.   |   |   P → □ □ Q             1 □ E
   04.   |   |   □ □ Q → □ Q           Ax M
   05.   |   |   P → □ Q               3,4 HS
   06.   |   □ (P → □ Q)               2-5 □ I
   07.   □ (P → □ □ Q) → □ (P → □ Q)   1-6 → I
   08.   |   □ (P → □ Q)               H (for → I)
   09.   |   |□                        H (for □ I)
   10.   |   |   P → □ Q               8 □ E
   11.   |   |   □ Q → □ □ Q           Ax 4
   12.   |   |   P → □ □ Q             10,11 HS
   13.   |   □ (P → □ □ P)             9-12 □ I
   14.   □ (P → □ Q) → □ (P → □ □ Q)   8-13 → I
   15.   □ (P → □ □ Q) ↔ □ (P → □ Q)   1-6 → I
   QED

      ⊢S5  □ ◇ ◇ □ P ↔ □ P
   Proof
   01.   |   □ ◇ ◇ □ P                 H (for → I)
   02.   |   ◇ ◇ □ P                   1 Ax M
   03.   |   ◇ □ P                     2 Theorem 4'
   04.   |   □ P                       3 Theorem 5'
   05.   □ ◇ ◇ □ P → □ P               1-4 → I
   06.   |   □ P                       H (for → I)
   07.   |   ◇ □ P                     6 ◇ I
   08.   |   ◇ ◇ □ A                   7 ◇ I
   09.   |   □ ◇ ◇ □ P                 8 Ax 5
   10.   □ P → □ ◇ ◇ □ P               6-9 → I
   11.   □ ◇ ◇ □ P ↔ □ P               5,10 ↔ I
   QED

      ⊢S5 ◇ (□ ◇ P ∧ ◇ □ Q) ↔ ◇ (◇ A ∧ □ B)
   Proof
   01.   |   ◇ (□ ◇ P ∧ ◇ □ Q)         H (for → I)
   02.   |   |□                        H (for ◇ I)
   03.   |   |   |   □ ◇ P ∧ ◇ □ Q     H
   04.   |   |   |   □ ◇ P             3 ∧E
   05.   |   |   |   ◇ □ Q             3 ∧E
   06.   |   |   |   ◇ P               4 Ax M
   07.   |   |   |   □ Q               5 Theorem 5'
   08.   |   |   |   ◇ P ∧ □ Q         6,7 ∧I
   09.   |   ◇ (◇ P ∧ □ Q)             1,2-8 ◇ I
   10.   ◇ (□ ◇ P ∧ ◇ □ Q) → ◇ (◇ P ∧ □ Q)  1-9 → I
   11.   |   ◇ (◇ P ∧ □ Q)             H (for → I)
   12.   |   |□                        H (for ◇ I)
   13.   |   |   |   ◇ P ∧ □ Q         H
   14.   |   |   |   ◇ P               13 ∧E
   15.   |   |   |   □ Q               13 ∧E
   16.   |   |   |   □ ◇ P             14 Ax 5
   17.   |   |   |   ◇ □ Q             15 ◇ E
   18.   |   |   |   □ ◇ P ∧ ◇ □ Q     16,17 ∧I
   19.   |   ◇ (□ ◇ P ∧ ◇ □ Q)         11,12-18 ◇ I
   20.   ◇ (◇ P ∧ □ Q) → ◇ (□ ◇ P ∧ ◇ □ Q)  11-19 → I
   21.   ◇ (□ ◇ P ∧ ◇ □ Q) ↔ ◇ (◇ P ∧ □ Q)  10,20 ↔ I
   QED


---------------------------------------------
Alethic Deduction - ◇ Based Natural Deduction
---------------------------------------------

   In this formulation ◇ is the primitive modal operator.  An advantage to
   this formulation is that it's much easier to see how the various systems
   we've looked at so far relate.  In particular this system closely mirrors
   the accessibility relation of Kripke's world semantics.

   World Index
      A WORLD INDEX is an expression of the form '/n' (where
      n is in {0,1,2...}).  Write 'P  /i' to state that proposition P
      is true at world i.  The actual world is denoted /0, though it's
      usually implied.

   Bridge (AKA Accessibility Relation)
      A BRIDGE, '/n=>/m', denotes a way to travel from world '/n'
      to world '/m'.

System K
========

   This formulation takes ◇ to be primitive.  The calculi on top of Alethic
   Modal logic are defined by the following rules.  This system consists
   of the rules of Truth-Functional Calculus, plus some modified and new
   rules below.  All rules that don't include world indexes such as those of
   Truth-Functional Calculus, must occur entirely within a single world index.

   ================================  =========================================
   Name/Alternate Names              Rule   
   ================================  =========================================
   Reiterate (RE)                    Repeat any open formula - no restrictions

   Equivalence Substitution (EQ)     Not a rule of inference in this
                                     formulation of modal alethic calculus
   --------------------------------  -----------------------------------------
   Definition of □ (Def □ )          □ P  =df  - ◇ - P

   Necessitation Rule (NR)           if ⊢ P (P is a theorem or axiom), infer
                                     □ P into any world.

   ◇ Elimination (◇ E)               From ◇ P at world /i, infer P at world /j
                                     (where j is new).  The diamond "pays for
                                     the construction of" a new bridge /i=>/j.

   □ Elimination (□ E)               □ E may only cross bridges according to
                                     the system being used.
   ================================  =========================================

   These rules are sometimes represented in diagrams.  The horizontal bar
   denotes 'infer', vertical lines denote subproofs.

      +-------------------------------+-------------------------------+
      | ============================= | ============================= |
      | Equivalence Subst (EQ)        | Reiterate (RE)                |
      | ============================= | ============================= |
      | !!! Not Allowed !!!           | P                             |
      |                               | ---                           |
      |                               | P                             |
      |                               |                               |
      | ============================= | ============================= |
      | Def □                         | NR                            |
      | ============================= | ============================= |
      |                               | [ ⊢ P ]                       |
      | -----------------             | -------                       |
      | [□ P =df - ◇ - P]             | □ P       /i   (any i)        |
      |                               |                               |
      | ============================= | ============================= |
      | ◇ E                           | □ E                           |
      | ============================= | ============================= |
      | ◇ P      /i                   | □ P       /i                  | 
      | ---------                     | [/i=>/j]                      |
      | P        /j   (j is new)      | ----------                    |
      |           (creates a bridge   | P         /j                  |
      |               /i=>/j)         |                               |
      |                               |                               |
      +-------------------------------+-------------------------------+

Beyond System K
===============

   □ Elimination (□ E)
      The precise application of □ E varies according to the system used.

      ======  =============================================================
      System  □ E Rule
      ======  =============================================================
      K       Need a bridge /1=>/2 first to infer from □ P in /1 to P in /2.

      M/T     Like K, but every world has a bridge to itself. (K + reflexive)

      B       Like M, but bridges are bidirectional. (M + symmetric)

      S4      Like M, but can cross a series of bridges. (M + transitive)

      S5      □ Elim into any world at all. (M + symmetric + transitive)
      ======  =============================================================

   Diagrams

      +-------------------------------+-------------------------------+
      | ============================= | ============================= |
      | ◇ E                           | □ E (System K)                |
      | ============================= | ============================= |
      |  ◇ P    /i                    |  □ P    /i                    |
      | -----------                   |  [/i=>/j]                     |
      |  P      /j (j is new)         | -----------                   |
      |        (creates a bridge      |  P      /j                    |
      |            /i=>/j)            |                               |
      |                               |                               |
      | ============================= | ============================= |
      | □ E (System M)                | □ E (System B)                |
      | ============================= | ============================= |
      |  For every world /i,          |  For every bridge /i=>/j      |
      |  There is a bridge            |  there is a bridge /j=>/i     |
      |  /i=>/i                       |  in addition to the rules for |
      |  in addition to the rule for  |  System M.                    |
      |  System K.                    |                               |
      |                               |                               |
      | ============================= | ============================= |
      | □ E (System S4)               | □ E (System S5)               |
      | ============================= | ============================= |
      |  For every series of          |  Every world has a bridge     |
      |  bridges /i=>/j, /j=>/k       |  to every other world.        |
      |  there is a bridge            |  (both B and s4)              |
      |  /i=>/k                       |                               |
      |  in addition to the rules for |                               |
      |  System M.                    |                               |
      |                               |                               |
      +-------------------------------+-------------------------------+

Proof Construction
==================

      Procedure
      1.  Assume the premises and hypothesize the negated conclusion.
      2.  Use inference rules to move □ and ◇ to the front of the wff.
      3.  Use ◇ E to spend diamonds to build bridges.
      4.  Use □ E to spend boxes to traverse existing bridges according to
          the system we are using.

Proofs
------

   Dual ⊢ K  - □ P ↔ ◇ - P
        ⊢ K  - ◇ P ↔ □ - P
   Proof
   01.   |   - □ P                     H (for → I)
   02.   |   - - ◇ - P                 1 Def □
   03.   |   ◇ - P                     2 -E
   04.   - □ P → ◇ - P                 1-3 → I
   05.   |   ◇ - P                     H (for → I)
   06.   |   |   □ P                   H (for -I)
   07.   |   |   - ◇ - P               6 Def □
   08.   |   |   ⊥                     5,7 EFQ
   09.   |   - □ P                     6-8 -I
   10.   ◇ - P → - □ P                 6-9 → I
   11.   - □ P ↔ ◇ - P                 4,10 ↔ I
   QED

   Modal Distribution (MDIST) ⊢ K  □ (P → Q) → (□ P → □ Q)
   Proof
   01.   |   □ (P → Q)                 H (for → I)
   02.   |   |   □ P                   H (for → I)
   03.   |   |   □ (P → Q)             1 RE
   04.   |   |   |   - □ Q             H (for -I)
   05.   |   |   |   - □ --Q           4 DN
   06.   |   |   |   ◇ - Q             5 Dual
   07.   |   |   |   □ P               2 RE
   08.   |   |   |   □ (P → Q)         3 RE
   09.   |   |   |   - Q         /1    6 ◇ E          new bridge /0 => /1
   10.   |   |   |   P           /1    7 □ E (Sys K)
   11.   |   |   |   P → Q       /1    8 □ E (Sys K)
   12.   |   |   |   Q           /1    10,11 → E
   13.   |   |   |   ⊥           /1    9,12 EFQ
   14.   |   |   -- □ Q                4-13 -I
   15.   |   |   □ Q                   14 -E
   16.   |   □ P → □ Q                 2-15 → I
   17.   □ (P → Q) → (□ P → □ Q)       1-16 → I
   QED

   Diamond Distribution (◇ Dist)  ⊢ K  □ (P → Q) → (◇ P → ◇ Q) 
   Proof
   01.   |   □ (P → Q)                 H (for → I)
   02.   |   |   ◇ P                   H (for → I)
   03.   |   |   □ (P → Q)             1 RE
   04.   |   |   |   - ◇ Q             H (for -I)
   05.   |   |   |   - ◇ - - Q         4 DN
   06.   |   |   |   □ - Q             5 Def □ 
   07.   |   |   |   ◇ P               2 RE
   08.   |   |   |   □ (P → Q)         3 RE
   09.   |   |   |   P           /1    7 ◇ E          new bridge /0 => /1
   10.   |   |   |   -Q          /1    6 □ E (Sys K)
   11.   |   |   |   P → Q       /1    8 □ E (Sys K)
   12.   |   |   |   Q           /1    9,11 → E
   13.   |   |   |   ⊥           /1    10,12 EFQ
   14.   |   |   -- ◇ Q                4-13 -I
   15.   |   |   ◇ Q                   14 -E
   16.   |   ◇ P → ◇ Q                 2-15 → I
   17.   □ (P → Q) → (◇ P → ◇ Q)       1-16 → I
   QED

   Dist ◇ ∧    ⊢ K   ◇ (P ∧ Q) → (◇ P ∧ ◇ Q)
   Proof
   01.   ◇ (P ∧ Q)                     H (for ->I)
   02.   |   - ◇ P                     H (for -I)
   03.   |   - ◇ - - P                 2 DN
   04.   |   □ - P                     3 Def □
   05.   |   ◇ (P ∧ Q)                 1 RE
   06.   |   P ∧ Q               /1    5 ◇ E      new bridge /0=>/1
   07.   |   -P                  /1    4 □ E (Sys K)
   08.   |   P                   /1    6 ^E
   09.   |   ⊥                   /1    7,8 EFQ
   10.   ◇ P                           2-9 -I
   11.   |   - ◇ Q                     H (for -I)
   12.   |   - ◇ - - Q                 11 DN
   13.   |   □ - Q                     12 Def □
   14.   |   ◇ (P ∧ Q)                 1 RE
   15.   |   P ∧ Q               /2    14 ◇ E     new bridge /0=>/2
   16.   |   -Q                  /2    13 □ E (Sys K)
   17.   |   Q                   /2    15 ∧ E
   18.   |   ⊥                   /2    16,17 EFQ
   19.   ◇ Q                           11-18 -I
   20.   ◇ P ∧ ◇ Q                     10,19 ∧ I
   QED

   Thm ◇ B-00   ⊢ K   (□ P ∧ ◇ Q) → ◇ (P ∧ Q)
   Proof
   01.   |   □ P ∧ ◇ Q                 H (for → I)
   02.   |   |   - ◇ (P ∧ Q)           H (for -I)
   03.   |   |   - ◇ - - (P ∧ Q)       2 DN
   04.   |   |   □ - (P ∧ Q)           3 Def □
   05.   |   |   □ P ∧ ◇ Q             1 RE
   06.   |   |   □ P                   5 ∧ E
   07.   |   |   ◇ Q                   5 ∧ E
   08.   |   |   □ (-P ∨ -Q)           4 DM
   09.   |   |   Q               /1    7 ◇ E      new bridge /0=>/1
   10.   |   |   P               /1    6 □ E (Sys K)
   11.   |   |   -P ∨ -Q         /1    8 □ E (Sys K)
   12.   |   |   --Q             /1    9 DN
   13.   |   |   -P              /1    11,12 DS
   14.   |   |   ⊥               /1    10,13 EFQ
   15.   |   ◇ (P ∧ Q)                 2-14 -I
   16.   (□ P ∧ ◇ Q) → ◇ (P ∧ Q)       1-15 → I
   QED

   Thm ◇ B-01   ⊢ M   P → ◇ P
   Proof
   01.   |   P                         H (for → I)
   02.   |   |   - ◇ P                 H (for -I)
   03.   |   |   - ◇ - - P             2 DN
   04.   |   |   □ - P                 3 Def □
   05.   |   |   - P                   4 (Sys M)
   06.   |   |   P                     1 RE
   07.   |   |   ⊥                     5,6 EFQ
   08.   |   ◇ P                       2-7 -I
   09.   P → ◇ P                       1-8 → I
   QED

   Thm ◇ B-02   ⊢ M   □ P → P
   Proof
   01.   |   □ P                       H (for → I)
   02.   |   |   -P                    H (for -I)
   03.   |   |   □ P                   1 RE
   04.   |   |   P                     3 (Sys M)  /0=>/0
   05.   |   |   ⊥                     2,4 EFQ
   06.   |   P                         2-5 -I
   07.   □ P → P                       1-6 → I
   QED

   Thm ◇ B-03   ⊢ M   □ P → ◇ P
   Proof
   01.   □ P → P                       Thm ◇ B-02
   02.   P → ◇ P                       Thm ◇ B-01
   03.   □ P → ◇ P                     1,2 HS
   QED

   Thm ◇ B-04   ⊢ s4  □ P → □ □ P
   Proof
   01.   |   □ P                       H (for → I)
   02.   |   |   - □ □ P               H (for -I)
   03.   |   |   ◇ ◇ - P               2 Dual
   04.   |   |   -P              /2    3 ◇ E     new bridges /0=>/1, /1=>/2
   05.   |   |   P               /2    1 (Sys s4)
   06.   |   |   ⊥               /2    4,5 EFQ
   07.   |   □ □ P                     2-6 -I
   08.   □ P → □ □ P                   1-7 → I
   QED

   Thm ◇ B-05   □ (P → Q), □ P   ⊢   □ Q
   Proof
   01.   □ (P → Q)                     A
   02.   □ P                           A
   03.   □ (P → Q) → (□ P → □ Q)       MDist
   04.   □ P → □ Q                     1,3 → E
   05.   □ Q                           2,4 → E
   QED

   Proof
   01.   □ (P → Q)                     A
   02.   □ P                           A
   03.   |   - □ Q                     H (for -I)
   04.   |   - □ - - Q                 3 DN
   05.   |   ◇ - Q                     4 Def ◇
   06.   |   □ (P → Q)                 1 RE
   07.   |   □ P                       2 RE
   08.   |   - Q                 /1    5 ◇ E    new bridge /0=>/1
   09.   |   P → Q               /1    6 □ E (Sys K)
   10.   |   P                   /1    7 □ E (Sys K)
   11.   |   Q                   /1    9,10 → E
   12.   |   ⊥                   /1    8,11 EFQ
   13.   □ Q                           3-12 -I
   QED 


---------------------------------------
Alethic Deduction - Relative Modalities
---------------------------------------

   In a system with relative modalities world indexes constitute tree paths.

                             /0
                            /  \
                          /      \
                        /01      /02
                        / \
                      /    \
                   /013     /014


   Expressions of the form /i+m indicate that a digit m must be appended
   to the world index /i forming a new composite world index.

      +-------------------------------+-------------------------------+
      | ============================= | ============================= |
      | Equivalence Subst (EQ)        | Reiterate (RE)                |
      | ============================= | ============================= |
      | !!! Not Allowed !!!           | P                             |
      |                               | ---                           |
      |                               | P                             |
      |                               |                               |
      | ============================= | ============================= |
      | Def ◇                         | NR                            |
      | ============================= | ============================= |
      |                               | [ ⊢ P ]                       |
      | -----------------             | -------                       |
      | [◇ P =df - □ - P]             | □ P       /i   (any i)        |
      |                               |                               |
      | ============================= | ============================= |
      | ◇ E (All Systems)             | □ I (All Systems)             |
      | ============================= | ============================= |
      |  ◇ P    /i                    |  |        /i+m (m is new)     |
      | -----                         |  | ...                        |
      |  P      /i+m (m is new)       |  | P      /i+m                |
      |                               | -----                         |
      |                               |  □ P      /i                  |
      |                               |                               |
      +-------------------------------+-------------------------------+

   The □ E and ◇ I vary according to the system in use

      +-------------------------------+-------------------------------+
      | ============================= | ============================= |
      | □ E (System K)                | ◇ I (System K)                |
      | ============================= | ============================= |
      |  □ P    /i                    |  P        /i+m (m is old)     |
      | -----                         | -----                         |
      |  P      /i+m (m is old)       |  ◇ P      /i                  |
      |                               |                               |
      | ============================= | ============================= |
      | □ E (System D)                | ◇ I (System D)                |
      | ============================= | ============================= |
      |  □ P    /i                    |  P        /i+m (m is new)     |
      | -----                         | -----                         |
      |  P      /i+m (m is new)       |  ◇ P      /i                  |
      |                               |                               |
      | ============================= | ============================= |
      | □ E (System M)                | ◇ I (System M)                |
      | ============================= | ============================= |
      |  □ P    /i                    |  P        /i                  |
      | -----                         | -----                         |
      |  P      /i                    |  ◇ P      /i                  |
      |                               |                               |
      | ============================= | ============================= |
      | □ E (System B)                | ◇ I (System B)                |
      | ============================= | ============================= |
      |  □ P    /i+m (m is old)       |  P        /i                  |
      | -----                         | -----                         |
      |  P      /i                    |  ◇ P      /i+m (m is old)     |
      |                               |                               |
      | ============================= | ============================= |
      | □ E (System s4)               |  ◇ I (System s4)              |
      | ============================= | ============================= |
      |  □ P    /i                    |  P        /i+m+n (m is old)   |
      | -----                         | -----                         |
      |  P      /i+m+n (m is old)     |  ◇ P      /i                  |
      |                               |                               |
      | ============================= | ============================= |
      | □ E (System s5)               |  ◇ I (System s5)              |
      | ============================= | ============================= |
      |  □ P    /i+m (m is old)       |  P        /i+m (m is old)     |
      | -----                         | -----                         |
      |  P      /i+n (m is old)       |  ◇ P      /i+n (m is old)     |
      |                               |                               |
      +-------------------------------+-------------------------------+

   An OLD INDEX is when the index occurs in at least one line that is neither
   boxed nor cancelled otherwise it's a NEW INDEX.

   □ (P → Q), □ P  ⊢  □ Q
   Proof
   01.   □ (P → Q)                     A
   02.   □ P                           A
   03.   |                       /01   H (for □ I)
   04.   |   □ (P → Q)                 1 RE
   05.   |   □ P                       2 RE
   06.   |   P → Q               /01   4 □ E (/0=>/01)
   07.   |   P                   /01   5 □ E (/0=>/01)
   08.   |   Q                   /01   6,7 → E
   09.   □ Q                           3-8 □ I
   QED

   □ (P → Q), ◇ P  ⊢  ◇ Q
   Proof
   01.   □ (P → Q)               /0    A
   02.   ◇ P                     /0    A
   03.   P                       /01   2 ◇ E
   04.   P → Q                   /01   □ E
   05.   Q                       /01   3,4 → E
   06.   ◇ Q                     /0    5 ◇ I
   QED

   □ (□ P → □ (P → Q)), □ □ P  ⊢  □ □ Q
   Proof
   01.   □ (□ P → □ (P → Q))     /0    A
   02.   □ □ P                   /0    A
   03.   |                       /01   H (for □ I)
   04.   |   □ (□ P → □ (P → Q)) /0    1 RE
   05.   |   □ □ P               /0    2 RE
   06.   |   □ P → □ (P → Q)     /01   4 □ E
   07.   |   □ P                 /01   5 □ E
   08.   |   □ (P → Q)           /01   6,7 → E
   09.   |   □ (P → Q) → (□ P → □ Q)   /01  Axiom (K)
   10.   |   □ P → □ Q           /01   8,9 → E
   11.   |   □ Q                 /01   7,10 → E
   12.   □ □ Q                   /01   3-11 □ I
   QED


------------------------------------------
Alethic Deduction - Non-Historical Systems
------------------------------------------

   Neo-Systems

   A neosystem is any combination of the basic rules not covered by the
   one of the systems above.

         K4     k,4 rules
         KDB    k,d,b rules
         KB4    k,b,4 rules
         ...

   G-Systems

   A GENERAL AXIOM G is any axiom achieved by exponentiating the modal
   operators in the formula G as follows

                           j   k       m   n
         G(j,k,m,n)  =df  ◇   □   P → □   ◇  P

   The exponents work as expected in that they simply name the number of
   occurrences of the base symbol.

   A G-system is a modal logic that contains the K-thesis as well as
   finitely many theses of the form G(j,k,m,n).  Nearly every thesis we
   have considered can be written using G-notation

      axiom    G-notation     Dual
      -----    ----------     ----------
       G       G(1,1,1,1)
       D       G(0,1,0,1)
       M       G(0,1,0,0)     G(0,0,1,0)
       B       G(1,1,0,0)     G(0,0,1,1)
       4       G(0,1,2,0)     G(2,0,0,1)
       4.2     G(0,2,3,0)     G(3,0,0,2)
       4.3     G(0,3,4,0)     G(4,0,0,3)
       ...
       5       G(1,1,1,0)     G(1,0,1,1)

   System X1
       K           □ (P → Q) → (□ P → □ Q)
       G(0,1,1,1)  □ P → □ ◇ P

   System X2
       K           □ (P → Q) → (□ P → □ Q)
       G(2,1,2,1)  ◇ ◇ □ P → □ □ ◇ P


-----------------
Modal Truth-Trees
-----------------

   With trees in modal logic we enclose parts of trees within boxes
   to represent different possible worlds.  We add arrows between
   boxes to represent the accessibility relation. Next we add tree
   formation rules for the two modal operators.

   Tree Formation Rules

   ====  =====================================================================
   Name  Rule
   ====  =====================================================================
   □     If an open path in some world w contain an unstarred wff □ P, place
         P at the bottom of every open path in every world v accessible
         from w.

   -□    If an open path in some world w contains an unstarred wff -□ P,
         star it, write -P at the top of a new world v, and draw an arrow
         from each open path in w to v.

   ◇     If an open path in some world w contains an unstarred wff ◇ P,
         star it, write P at the top of a new world v, and draw an arrow
         from each open path in w to v.

   -◇    If an open path in some world w contain an unstarred wff -◇ P, place
         -P at the bottom of every open path in every world v accessible
         from w.
   ====  =====================================================================

   Tree Formation Rules Diagrams

      +-------------------------------+-------------------------------+         
      | ============================= | ============================= |
      |          □ Rule               |          -□ Rule              |
      | ============================= | ============================= |
      |         +-------+w            |         +-------+w            |
      |         |  □ P  |             |         | *-□ P |             |
      |         +-------+             |         +-------+             |
      |             |                 |             |                 |
      |             V                 |             V                 |
      |         +-------+v  every     |         +-------+v  v is      |
      |         |  ...  |   v         |         |  -P   |   new       |
      |         |   P   |             |         |  ...  |             |
      |         +-------+             |         +-------+             |
      |                               |                               |
      | ============================= | ============================= |          
      |          ◇ Rule               |          -◇ Rule              |
      | ============================= | ============================= |
      |         +-------+w            |         +-------+w            |
      |         | *◇ P  |             |         |  -◇ P |             |
      |         +-------+             |         +-------+             |
      |             |                 |             |                 |
      |             V                 |             V                 |
      |         +-------+v  v is      |         +-------+v  every     |
      |         |   P   |   new       |         |  ...  |   v         |
      |         |  ...  |             |         |  -P   |             |
      |         +-------+             |         +-------+             |
      |                               |                               |
      |                               |                               |
      +-------------------------------+-------------------------------+

      Notice -□  converts to ◇ -, and that -◇  is defined to convert to □ -.
      Thus, it's possible to regard there as being only two rules, and it's
      the ◇  which creates new world boxes while □  just drops into
      existing worlds.

      However, ◇  is defined in terms of □ , so the two rules to be taken
      as fundamental are □  and -□ , while the ◇  rules ought to be
      regarded as derived.

   Tree Construction

   Trees are constructed similarly to how they are constructed for TFL,
   but add the notion of world boxes which are introduced according
   to the above rules.  However, there are just a few notes,

   - To close a branch we need P and -P in the same world box.

   - Branching rules from TFL mean that a world can exist on a certain branch.

   - The arrows between world boxes signify the accessibility relation.

   - Rules for TF operators should always be applied before rules for
     modal operators.

   - Modal rules that create new world boxes -□  and ◇  should be
     applied before modal rules that don't

   - Rules applied to □ P and -◇ P do not star the original wff because
     for each new world the rules must be reapplied.
     

Truth-Tree Analysis

   The rules for analyzing completed trees are the same as those for TFL.

   Truth-Tree Assessment of a Single WFF

          =============   ============================   ==========
          condition       wff                            -wff
          =============   ============================   ==========
          0               inconsistent                   tautology
          1+              consistent                     contingent
          2+              validity or contingency        contingent
          =============   ============================   ==========

   Truth-Tree Assessment of a set of WFFs

          =============   ============================
          condition       wff Set
          =============   ============================
          0               inconsistent
          1+              consistent
          =============   ============================

   Truth-Tree Assessment of a Sequent

          =============   ============================
          Condition       Premises & -Conclusion
          =============   ============================
          0  open paths   valid
          1+ open paths   Invalid w/ counterexamples
          =============   ============================

K-Model Truth-Trees

   □ (P ∧ Q) ⊢ □ P ∧ □ Q

            
            +---------------------+w0       All paths close
            |  *  □ (P ∧ Q)       |         so the argument
            |  * -(□ P ∧ □ Q)     |         is K-valid.
            |      /       \      |
            |    /           \    |
            |* -□ P        * -□ Q |
            +---------------------+
               |               |
               V               V
         +---------+w1     +---------+w2
         |   -P    |       |   -Q    |
         |* P ∧ Q  |       |* P ∧ Q  |
         |    P    |       |    P    |
         |    Q    |       |    Q    |
         |    X    |       |    X    |
         +---------+       +---------+

   ◇ (P → Q), ◇ P ⊢ ◇ Q

               +--------------+w0           Not all paths close
               |* ◇ (P → Q)   |             so the argument
               |*     ◇ P     |             is K-invalid.
               |*    -◇ Q     |
               +--------------+
                |            |
                |            V
                |   +-----------------+w2
                |   |      P → Q      |
                |   |        -Q       |
                |   |      /    \     |
                |   |    /        \   |
                |   |  -P          Q  |
                |   |              X  |
                |   +-----------------+
                |      |
                V      V
                +------+w1                  w1 is on the left branch but
                |   P  |                    accessible from w0 because it's
                |  -Q  |                    original wff ◇ P is in w0.
                +------+

      As for our argument listed out in world box w0, ◇ (P → Q) is true
      in w0, since P → Q is true in at least one world w2.  ◇ P is true
      in w0, since P is true in w1.  But ◇ Q is false in w0, since there
      is not world accessible from w0 where Q is true.  Since the premises
      are all true but the conclusion is false, the form is invalid.


===================
Deontic Modal Logic
===================


--------
Language
--------

   Lexemes

      OP, P is obligatory
      PP, P is permissible  (some authors use 'RP' instead)

   Definitions
      Definition of Permissible (PEDef)
         Pp  =df  -O-p


---------
Semantics
---------

   The Deontic Acceptability Definition (DADef)

         ∀i∀j(Aij ↔ ∀p(OB(p)/i → p/j))

   Which reads for any worlds i,j, j is acceptable to i if and only if for all
   propositions p, if p is obligatory in i then p is the case in j.

   So imagine that world i is some world where the only thing that is
   obligatory is that you do not kill.  And world j where no one ever kills
   bears the acceptability relation i.

   Deontic Acceptance Seriality (DAS)

         A^i  =df  All worlds that bear the acceptability relation to i.

   There must be at least one A^i world since ought implies can It should
   be possible for us to fulfill all our obligations.  In other words ∀i∃jAij
   (for all i there exists some j where j bears the acceptability relation
   to i).


------------------------------------------
Deontic Deduction (Standard Deontic Logic)
------------------------------------------

Axiom Schemata
==============

   The goal is to have a Deontic logic which is an isomorphism to alethic
   modal logic.  It's the most commonly used and referenced version of Deontic
   Logic.

      Axiom Schema K (K)
         Alethic:  □ (P → Q) → (□ P → □ Q)
         Deontic:  O(P → Q) → (OP → OQ) 

      Axiom Schema D (D)
         Alethic:  □ P → ◇ P
         Deontic:  OP → PP

      Necessitation Rule (NR)
         Alethic:  if ⊢ P then □ P      for all axioms and theorems P
         Deontic:  if ⊢ P then OP       for all axioms and theorems P

      Notes

      - According to this rule it's not just illogical to have
        P and -P, it's morally wrong.  It's O(-(P ∧ -P)).
      - Nec doesn't seem to really work right in Deontic logic and it
        may be better to go without it.  The problem here is that it
        sort of breaks the isomorphism with alethic logic, which is
        what SDL (Standard Deontic logic) may be better off doing.

Philosophical Concerns
======================

   a. All tautologies are obligatory, and contradictions forbidden.

      It seems odd that one would be obligated to bring about something
      which cannot be false.

   b. If something is permitted, then either it or anything else is permitted.

         ⊢ D PA → P(P ∨ Q)
         ⊢ D OA → O(P ∨ Q)

   c. We have the following theorem: one cannot have conflicting obligations.

         (NonCon) ⊢ D -(OP ^ O-P)

         Yet it seems possible to have conflicting obligations in the
         actual world.

   d. (Chisholm's paradox) SDL cannot adequately capture conditional
      obligation.

         "It ought to be that if P then Q" is ambiguous

         O(P → Q), or
         P → OQ

Semantics of Standard Deontic Logic (SDL)
=========================================

   Kripke Semantics

   ... for OP
   
   All worlds that bear the acceptability relation to i are also worlds where
   p is true.  That is, there are no worlds that bear the acceptability to i
   where p is false.

   It is obligatory that p in i can be understood in terms of an Aristotelian
   categorical logic universal affirmative statement.

   All A^i worlds are also worlds where p is true (since by definition an A^i
   world is a worlds where all obligations in i are true).

   ... for PP

   If it is permissible that p at i, that means that there is at least one
   world in which p is true, that bears the acceptability relation to i.  In
   other worlds, there is at least one world where all the obligations of
   world i are fulfilled and p is true.

   Examples

         It is obligatory that no one lies.  (O-L)

   If it is obligatory that no one lies in world i, that means that there can
   be no world in which all of the obligations of world i hold true, and yet
   there are people that lie.  And there exists one world where all of the
   obligations of i hold true and no one lies.

         It's permissible to swear.   (PS)

   If it is permissible to swear in world i, then that means that there is at
   least one world where someone swears and all of the obligations of world
   i are fulfilled.

         It's impermissible to kill.  (-PK)

   If it's impermissible to rape in world i, then there is no world in which
   all of the obligations in i are fulfilled and a rape is committed.  There
   is also at least one world where all of the obligations in i are fulfilled.

         It's omissible to eat oats.  (P-E)

   If it is omissible to eat oats in world i, then there is some world where
   all of the obligations of i are true, but no one eats oats.

   Relating to Categorical Logic

         OP/i

            All worlds where all obligations of i are fulfilled are worlds
            where P is true.  Correlates to an aristotelian A form.

         PP/i

            There exists a world where all obligations of i are fulfilled and
            P is true.  Corresponds to an aristotelian I form.


----------------------------------------------------
Deontic Deduction (Augmented Standard Deontic Logic)
----------------------------------------------------

   The idea here is to extend SDL (Standard Deontic Logic).  So everything
   below is in addition to SDL.

   Axioms
      Double Obligation Axiom (DOA)
         Alethic:  □ (□ P → P)
         Deontic:  O(OP → P)

   Notes

   - This axiom schema (DOA) is contentious.
       

Semantics of Augmented Deontic Logic
====================================

      - Recall that Augmented Deontic Logic includes the DOA (Double
        Obligation Axiom):
           OB(OB(p) → p)
        corollary:
           OB(OB(p)) → OB(p)
      - The Double Obligation axiom doesn't hold for the semantics of Standard
        Deontic Logic.

      Semantics
         Imagine 3 possible worlds

            i    j    k

         with relations:
         - Aij, j is acceptable to i
           meaning: all obligations in i are true in j.
         - Ajk, k is acceptable to j
           meaning: all obligations in j are true in k.
         
         - We're going to try to create a counterexample.
           So, in world i we're going to deny DOA.
            -OB(OB(p) → p) in world i
            therefore
            OB-(OB(p) → p) in world i
         - But because of our relation, everything in i is true in some j.
           So,
                 -(OB(p) → p) in world j
              ∴ -(-OB(p) v p) in world j
              ∴ OB(p) ∧ -p    where it's -p in world j
           The result may be surprising but it's not a contradiction.
           Often obligations aren't fulfilled in a world.
         - So finally, there exists some world k where
           where:
                 p

         - Since we can provide a counterexample, where DOA is not the case
           that means that adding DOA would create a different situation
           where this would be disallowed.  It would require that for a world
           to be acceptable to i, it must be acceptable to itself.

         - So the DOA requires that for a world to be acceptable to i,
           it must be acceptable to itself.
         - So world j cannot exist because, by the final result above
           (namely OB(p) ∧ -p), because there could be no world where
           it's obligatory that p and p was not done, which would be
           considered acceptable to world i.

         As a consequence of these last points we're going to define a new
         acceptability relation A+.

      A+ Acceptability relation (A+)
         Recall that the acceptability relation is defined as:
                 Ai:Aj:(Aij ↔ Ap:( OB(p)/i           → p/j))
         We're going to make a new acceptability relation called A+
                 Ai:Aj:(Aij ↔ Ap:((OB(p)/i ∨ OB(p)/j) → p/j)
             World i bears the acceptability relation to world j, if and only
             if for all propositions p, p being obligatory in i or j implies
             that it is true in j.


---------------------------------
Deontic Deduction (Other Systems)
---------------------------------

   Some othe popular forulations add additional principles governing
   iterated deontic operators.

--------------------
Deontic Reductionism
--------------------
   The goal here is to try to reduce deontic logic down to Alethic Modal
   Logic System K.

   Andersonian Kangerian Reduction
      Reduction
         Anderson and Kanger independently discovered methods that they
         claimed could reduce Deontic Logic to Modal Logic using a single
         axiom and propositional constant instead of several axioms and
         a new predicate (namely OB).
      Kanger (System Kd)
         Uses a propositional constant 'd' which means all normative
         demands are met.  Kanger will replace all of the axioms of our
         deontic system with one simple axiom ◇ d (it's possible that all
         normative demands are met) and the standard modal axioms for
         System K.  We'll call this system Kd.
      Anderson
         Did the same but used a constant 's' instead of 'd' which means
         some normative demand has been violated.  It should be clear
         that this is identical to -d, and we could take for an equivalent
         axiom to ◇ d either ◇ -s or -□ s.
      Notes
         - This system may seem to reduce SDL to alethic system K.  But we'll
           show that this isn't the case.

   System Kd (Kandger's Deontic Logic)
      System Kd is System K + Axiom d, where axiom d states that d is
      possible.

      System K (K)
         Definitions
            Definition of Possibility (Def◇ )
               ◇ A  =df  -□ -A

         Axioms
            Necessitation Rule (NR)
               if A is an axiom or theorem of K then □ A is too.
            Distribution Axiom (K)
               □ (A → B) → (□ A → □ B)

      System Kd
         Uses all of the above plus the following axiom.

         Axiom d (d)
            ◇ d, it is possible that all normative demands, or obligations
                 are met.

      We can use this system to derive many of the theorems of SDL (Standard
      Deontic Logic).

      Notes
         - Modal System K is generally non-controversial, and it seems that
           the claim that there is at least one possible world in which all
           of the normative demands (obligations) are met exists does not
           seem to be too problematic.
         - The claim is that this system is equivalent to SDL.  But we'll
           show that this isn't the case.

      Definitions in System Kd (KdD)
         Kd can sufficiently represent all of the deontic terms that we
         have learned in terms of d and □  (and ◇  which can be defined
         in terms of □ ).  All of these will be referred to as KdD in
         proofs.

         OB(p)  =df  □ (d → p)

         PE(p)  =df  ◇ (d ∧ p)

         IM(p)  =df  □ (p → -d)

         OM(p)  =df  ◇ (d ∧ -p)

      Examples
         - Let's say:  'it's obligatory that you always wash your hands
           before dinner.'
              OB(w)
           So by definition,
              □ (d → w)
           In all possible worlds where all obligations are fulfilled, you
           always wash your hands before dinner.
         - Let's say, 'Killing is omissible.'
              OM(k)
           Then by definition:
              ◇ (d ∧ -k)
           'There exists some possible world in which both all obligations
           are fulfilled and no one is killed.'

   System Ks (Anderson's Deontic Logic)
      Uses a propositional constant 's', which means 'some deontic demand
      has been violated.  This could be defined in terms of Kd as s=-d.
      This system includes instead, all of K and Anderson's axioms,
      which is equivalent to Kanger's axiom.

      System K (K)
         Necessitation Rule (NR)
            if A is an axiom or theorem of K then □ A is too.
         Distribution Axiom ((K))
            □ (A → B) → (□ A → □ B)
         Definition of Possibility (Def◇ )
            ◇ A =df -□ -A

      Anderson's Axom (Axiom s)
         -□ s     it is not the case that, it's necessary that, s.

      Definitions
         The definitions are basically all the same as those in system Kd.
         For example.

         OB(p)  =df  □ (-p → s)
            etc.

      Notes
         - Both Systems Kd and Ks will prove to be more powerful than
           SDL (Standard Deontic Logic) and cannot be reduced to it.

   System KTd (KMd)
      Here we assume all of system Kd and add System T (or System M).

      Axioms
         Axiom M (Axiom T)
            Alethic:  □ A → A
            Deontic:  OB(A) → A

            - corollary
              A → ◇ A
              A → PE(A)

      Recall System T (System M) where necessity implies truth.  System T
      is System K with Axiom M (or Axiom T).

   Why Deontic Reduction Fails

      Why Kd and Ks are not actually reducible to SDL.

      - While a deontic version of T (OB(p) → p) might be too strong, it
        seems that a logical system is hard to create without the alethic
        version.  Most systems of alethic modality require that if something
        is in all possible worlds it is in the actual world, and if
        something is in the actual world it is possible.

      
      While Axiom T (Axiom M) seems important to most alethic systems, it
      does not seem to be a desired property to a deontic system.

      Notes
      - The problem is that while adding the alethic version of T to
        SDL will not create any significant changes, (and it will not
        cause it to turn into the augmented version) adding T to Kd
        will create significant changes and it will allow our
        augmented version of deontic logic including the DOA (Double
        Obligation Axiom) to be able to be deduced.
      - What this means is that either the advocate of Kangerian and
        Andersonian reduction my deny that something that is necessary
        is true in the actual world (which seems to me a difficult
        position to defend considering our understanding of alethic
        modality) or give up on reduction.
      - This does not mean that these fail as deontic systems as a
        whole, merely that they are not reductions of SDL at least
        when axiom M (T) is include in our system.  They can still
        stand as separate systems on their own, but it seems to me that
        their position as reductions of SDL is debunked.
      - This doesn't mean that reductionist systems fail on their own.
        They can still stand as systems on their own. or still deny
        Axiom M (T) and still claim to be a reduction. 

Semantics
   Modal Accessibility Definition relation (MADef)
      Ai:Aj:(ARij ↔ Ap:(Pi → ◇ pj))
      Where,
         i and j are worlds
         p is a proposition
         xw means x is true in a given world w
      So, for all worlds i and j, j is accessible to i if and only if for
      all propositions p, if p is true in i, p is possible in j.

      - There's an ambiguity.  Depending on exactly how we construe modality
        (as logical or nomic (of obligation)) it may be the case that all
        worlds are accessible to all other worlds.

      Definitions
         AR^i  =df  all worlds that bear the accessibility relation to i.

         - Just as A^i represented all of the worlds that were acceptable
           to i, AR^i represents all of the worlds that are accessible
           to i, as noted above, this could also be all possible worlds.

   Reductionist Deontic Semantics
      The semantics for Reductionist Deontic Logic will look somewhat
      similar to the semantics for Standard Deontic Logic.  Both can be
      visualized in terms of categorical logic.  We will replace  A^i
      with AR^i and add in all worlds in which d is satisfied.


====================
Temporal Modal Logic
====================

   Temporal logic is isomorphically similar to alethic and deontic logics.

   Operators

      Strong Operators:  □   O  H  G
      Weak Operators:    ◇   P  P  F

      HP,  It has always been the case that, P.
      PP,  It was at some time, P.

      GP,  It's going to always be the case that, P.
      FP,  At some time in the future, P.

System Kt (Minimal Temporal Logic)

   System Kt is an isomorphism to alethic modal logic's System K.

   Definitions
      Alethic:             □ P  =df  - ◇ - P
      Deontic:             OP   =df  - P - P
      Temporal:            HP   =df  - P - P
                           GP   =df  - F - P

   Axiom Schema (K)
      Alethic (K):         □ (P → Q) → (□ P → □ Q)
      Deontic (K):         O(P → Q) → (OP → OQ)
      Temporal (KG):       G(P → Q) → (GP → GQ)
      Temporal (KH):       H(P → Q) → (HP → HQ)

   Necessitation Rule (NR)
      Alethic:             if ⊢ P then □ P
      Deontic:             if ⊢ P then OP
      Temporal (TNR):      if ⊢ P then AP
                           if ⊢ P then HP
                           if ⊢ P then GP

   System Kt Axiom Schemata
      Axiom GP (TAGP):     P → GPP
      Axiom HF (TAHF):     P → HFP

System K4t (Transitive Temporal Logic)

   Similar to Alethic System K4, which adds axiom s4 to system K.  K4t assumes
   that precedence is transitive, but the axiom is framed in terms of tense
   operators.

   All of the first principals of System Kt, plus the following:

   Axiom Schema 4
      Alethic (4):         □ P → □ □ P
      Temporal             GP → GGP
        (Kt4 or TA4):      HP → HHP

System S4t (Reflexive Temporal Logic)

   So far we have been assuming that precedence is irreflexive.  However some
   temporal logics are reflexive due to the inclusion of an axiom equivalent
   to the modal alethic Axiom T (or M).  Here we'll look at S4t which
   includes all of K4 plus Axiom T (or M).

   Axioms

   All of the first principals of system K4t, plus the following:

   Axiom Schema T (M)
      Alethic (M):         □ P → P
      Deontic (M):         OP → P
      Temporal (TAT):      GP → P
                           HP → P

   Notes
      - These axioms and corollaries seem a little fishy to me.  I'm not sure
        I agree with them and they do seem to extend the meanings of G and H
        to include the present instant in time.
      - Because they don't make sense to me I'm generally not going to
        assume reflexivity of precedence.

System Lt (Linear Temporal)

   So far our logic has been assuming that our model is linear.  Linear
   functions effectively the same as connectedness by claiming that there's
   only one non-branching timeline.  Like Axioms GP and HF it mixes past
   and future, so it will not have an analogue in other modal logics.  Lt
   will include all of Kt, as well as 4 (transitivity) and L (Linearity).

   Axioms
      All of the first principals of System K4t

      Temporal Axiom of Linearity
         Temporal (TAL):   (F(P(p)) ∨ P(F(p))) → E(p)

System Nt (Well Ordered Temporal Logic)  Natural Numbers

   This logic is going to include everything from L, but add on three new
   axioms: No End, Forward Induction (implies backwards discreteness),
   and Well Ordering.  None of these principles is new (discussed WRT
   precedence operator), but here they are expressed with tense operators.
   We'll call this System Nt since it creates a set of time instants that
   is isomorphically similar to the natural numbers (positive integers), with
   a beginning but no end, and every number has an immediate predecessor.

   Axioms
      All of the first principals of system Lt

      Axiom D
         Alethic (D):      □ A → ◇ A
         Deontic (D):      OB(p) → PE(p)
         Temporal Axiom of
            No End (TANE):        G(p) → F(p)

      Axiom 5 (s5)
         Alethic (5):      ◇ A → □ ◇ A
         Temporal (5):     (F(p) ∧ G(p → F(p))) → G(F(p))
            Temporal Forward Induction Axiom

      Temporal Axiom of Well Ordering
         Temporal:         H(H(p) → p) → H(p)
            For any set of instances there is a least (or first).

   Notes
      - At first glance it may not be clear why these two axioms imply that
        time has no end or beginning, but you must remember that in the
        final instant of time G(p) is vacuously true for all p, and F(p)
        is false for all p.
      - Forward induction implies backward discreteness.

   Components of System Nt
      System Lt
      Temporal Axiom of Well Ordering
      Temporal Forward Induction Axiom (5)
      Temporal Axiom of No End (D)

System Zt (Inductive Temporal Logic)   Integers
   This system corresponds to the integers.  It will include both forward
   induction and backward induction (therefore both forward and backward
   discreteness).  It will include both no end and no beginning as well.

   Axioms
      All of the first principles of Lt (Liner Temporal).

      Temporal Axiom of
         No End:           G(p) → F(p)
         No Begin:         H(p) → P(p)

      Temporal Induction Axiom
         Forward:          (F(p) ∧ G(p → F(p))) → G(F(p))
         Backward:         (P(p) ∧ H(p → P(p))) → H(P(p))

System Qt (Dense Temporal Logic)    Rationals
   If time is dense that means that between any two instants there is another
   instant.  It's infinitely divisible.  This is in direct contradiction to
   forward and backward induction.  This system, which we will call Qt can
   be mapped onto the ratiional numbers since there is always another
   fraction in between any two fractions.  If you think that there are an
   infinite number of instants between any two instants then you think
   that time is dense.

   Axioms
      All of the first principles of Lt (Linear Temporal Logic)

      Temporal Axiom of
         No End:           G(p) → F(p)
         No Begin:         H(p) → P(p)

      Temporal Density Axiom:
                           G(G(p)) → G(p)
                           F(p) → F(F(p))

System Rt (Complete Temporal Logic)   Reals
   For a timeline to be complete, that instants that any set of instants that
   is defined by an instant that all instants in the set are before must be
   able to be defined by an instant that all instants in the set are before
   which is an instant in the original timeline.  This is quite perplexing,
   the best way to understand it is in terms of types of numbers.  Of the
   types of numbers we have looked at (natural numbers, integers, rational
   numbers and real numbers) rational numbers are the only ones that are not
   complete.
      
   Axioms
      All of the first principles of Qt

      Temporal Completeness Axiom
                           A(H(p) → F(H(p)) → (H(p) → G(p))

Temporal Logic Comparison

Kt = Ax K + Axioms GP,HF
   K4t = Kt + Ax s4
      s4t = K4t + Ax T
      Lt  = K4t + Linearity                                           line
         Nt = Lt + Ax D (No End) + Ax 5 (Fwd Induct) + Well Ordering  Natural
         Zt = Lt + Ax D (No End/Begin) + Ax 5 (Fwd/Bkw Induct)        Integer
         Qt = Lt + Ax D (No End/Begin) + Density                      Rational
            Rt = Qt + Completeness                                    Real


              ---  -------  ----  ------  -------  ------  --------  --------
            | Kt   K4t      S4t   Lt      Nt       Zt      Qt        Rt
            | Min  Transit  Refl  Linear  Well     Induct  Dense     Complete
            |                             Ordered
First       |
Principles  |                             Natural  Intege  Rational  Reals
----------    ---  -------  ----  ------  -------  ------  --------  --------
Def H,G       *    *        *     *       *        *       *         *
NR            *    *        *     *       *        *       *         *
(K)                                             
- KG          *    *        *     *       *        *       *         *
- KH          *    *        *     *       *        *       *         *
GP,HF         *    *        *     *       *        *       *         *
4                  *        *     *       *        *       *         *
T (M)                       *
Linear                            *       *        *       *         *
Well Ordered                              *         
5
   Fwd Induct                             *        *
   Bkw Induct                                      *
D
   No End                                 *        *       *         *
   No Begin                                        *       *         *
Dense                                                      *         *
Completeness                                                         *


The Next Time Operator
   Lexemes
      X(p), in the instant directly after this one, p.
      Y(p), in the instant directly before this one, p. (Yesterday operator)

   Definitions
      X(p)t  =df  ∃x((t<x) ∧ (∀y((t<y) → (x<=y)) ∧ px))
      Y(p)t  =df  ∃x((x<t) ∧ (∀y((y<t) → (y<=y)) ∧ px))

   Axioms
      Axiom Kx:            X(P → q) → (X(p) → X(q))
      Functionality:       -X(p) ↔ X(-p)

   Notes
      - let's break down 'next' to better understand it
        X(p)t  =df  ∃x( (t<x) ∧   (∀y( (t<y) →      (x<=y))    ∧  px))
        X(p)t  =df  ∃x(  t<x  ∧   (∀y(  t<y  →       x<=y )    ∧  px))
                   some  after &   all   after are      after or  &  px
                   time  now       times now   (implies)identical
                   x                                    to x
                             or
                   some  after and before all other              and p at
                   time  now       instants after now                that time
                             or
                   p is true in the time interval (t..y]
                   where y is arbitrarily after t.

Since and Until Operators
   Lexemes
      S(p)(q), p has been the case since a time when q.
      U(p)(q), p will be the case until such a time when q.

   Definitions
      S(p)(q)t  =df  ∃x( (x<t ∧ qx) ∧ ∀y((y<t ∧ x<y) → py))
      U(p)(q)t  =df  ∃x( (t<x ∧ qx) ∧ ∀y((t<y ∧ y<x) → py))

      S(p)(q)   =df  Ax:( x>=q → px )
   
   Notes
      - Let's break down 'since' to better understand it
        S(p)(q)t =df ∃x( ((x<t) ∧ qx)  ∧   ∀y(((y<t) ∧ (x<y)) → py))
                     ∃x( ( x<t  ∧ qx)  ∧   ∀y(  x<y<t         → py))
                    some   in the past  &   all   after then &     p
                    time   when q          times  before now
        p is true since (all instants after) q but before t. Or given the
        instants p,q,t, q < p < t.  Similarly, 'until' is t < p < q.

      - There are two ways to conceive of since and until, either as strict,
        where precedence is defined as irreflexive, or as general where
        precedence is defined as reflexive.  We will use U and S to refer
        to the general versions and Us and Ss to refer to the strict versions.

Axioms of Since & Until
   If we assume precedence is reflexive we can define F(p) and P(P) in terms
   of since and until.

      F(p)  =df  U(T)(p)       (where T is the Tautology symbol)
      P(p)  =df  S(T)(p)

   If p is happening in the future then all tautologies have been true up
   until p is true.  If p is happening in the past, there exists some point
   in the past where p since all tautologies have been true.

   We can define the Next and Yesterday operators in terms of the strict
   versions of these operators.

      X(p)  =df  Us(CON)(p)    (where CON is the contradiction symbol)
      Y(p)  =df  Ss(CON)(p)

   So, p will happen in the next instant if there is nothing (a contradiction)
   that will be true from now until p.

   We can defined our general operators in terms of our strict operators.

      U(p)(q)  =df  q ∨ (p ∧ Us(p)(q))
      S(p)(q)  =df  q ∨ (p ∧ Ss(p)(q))

   p is true generally until q is the same as either q is the case now (and
   it is vacuously true) or p is the case and will be strictly true until q
   is the case.  The same applies to since.

LTL (Linear Time Logic)
   A common use of the time operators is a system known as LTL (Linear
   Time Logic).  This system only contains operators that deal with the
   future, namely G, X and U.  It's commonly used in Computer Science.

   Definitions
      Definition of X
                           X(p)t  =df  ∃x((t<x) ∧ (∀y((t<y) → (x<=y)) ∧ px))

      Reflexive Recursive Definition of G
                           G(p)  =df  (p ∧ X(G(p)))
                                      p is the case now an recursively at all
                                      points into the future.

      Reflexive Recursive Definition of U
                           U(p)(q)  =df  (q ∨ (p ∧ X(U(p)(q))))
   Axioms
      Modal Distribution
         Alethic:          □ (p → q) → (□ p → □ q)
         LTL (KG,(K)):   G(p → q) → (G(p) → G(q))
         LTL (KX,(K)):   X(p → q) → (X(p) → X(q))

      Necessitation Rule
         LTL (NR):         if ⊢ p then A(p)

      Next Time Functionality Axiom
                           -X(p) ↔ X(-p)

      Inductive Principle regarding X and G
                           p ∧ G(p → (q ∧ X(p))) → G(p)

      Principle Regarding Least Fixed Points and Completeness
                           G((p ∨ (q ∧ X(r))) → q) → (U(q)(p) → r)

Branching Time
   Branching time deals with the future only.  It deals with the possibility
   that there is more than one future available to us to choose from, though
   it assumes the past is static.

   Branching time models imagine that now is at the first branch on the
   trunk of a tree.  Everything before is determined, but everything after
   continues to branch off.

   However, branching time always assumes an actual future, which will
   function like the actual world does for alethic modal logic.

Ockhamist Branches of Temporal Logic
   The system of branching temporal logic that we will examine here is
   attributed by Arthur Prior to Ockham of Ockham's razor.  We will not
   get into the specific axioms of this theory here, but rather explain
   how you can express particular propositions using Ockhamist branching
   temporal logic.

   Grammar
      Often branching temporal logic uses ◇  and □  to denote "there exists
      some future timeline" and "for all future timelines" respectively.
      So that we don't confuse these with our alethic operators, we'll
      use <*> to denote "there exists some future timeline" and [*] to
      denote "for all future timelines".

      Lexemes:  [*]p       For all future timelines, p
                <*>p       There exists some future timeline where, p
                           For some future timeline, p

      To be clear, that means that [*]p means that from the stand point of
      this instant, for all future timelines, p.  Similarly, <*>P means from
      the standpoint of this instant, there exists some future timeline such
      that, p. [*](I will eat ice cream tomorrow) means that from the
      standpoint of this instant, for all future timelines, I will eat ice
      cream tomorrow.

      Furthermore, these symbols can be combined with our future tense
      operators (though it is not clear how they would be combined for past
      tense).  <*>G(p) means that from the standpoint of this instant, there
      exists some future timeline such that, it's going to be the case at
      all future instants that, p.  [*]U(p)(q) means from the standpoint of
      this instant, for all future timelines, p will be the case until such
      time as q.  <*>F(You will eat cake) means that from the standpoint of
      this instant, there exists some future timeline such that, at some
      instant in the future, you will eat cake.

      Just as any non-quantified symbols in modal logic apply to the
      actual world, symbols without a branching temporal quantifier will
      apply to the actual future.  So F(p) → <*>F(p) means that from the
      standpoint of the current instant, if at some instant in the future
      p then there is some future timeline such that, at some instant in
      the future, p.  Or simply, the actual future is a possible future.

      Imagine that you are the only person in all of history that can invent
      immortality.  In every possible future where you die before you get
      to 100, humans will not have achieved immortality when you die, and
      never will in any future timeline.
         [*](-U(you live)(you are 100) → (-<*>F((you are dead) ∧ (there
             exists some human)(G(that human will live))))


Notions
-------

      G:S,   It's going to always be that P.
      H:S,   It has always been the case that P.


Definition
----------

      DEF F.   F:S  =df  -G:-S    (It will at some time be the case that S)
      DEF P.   P:S  =df  -H:-S    (It was at some time the case that S)


Inference System Kt
---------

      G:I, H:I,   correspond to □ I
      G:E, H:E,   correspond to □ E

   These insure that all tautologies, axioms and theorems of the system
   have always been and always will be the case.

      GP.   S → GP:S
      HF.   S → HF:S

   Duals

      ⊢Kt  PG:S → S
      ⊢Kt  FH:S → S
      ⊢Kt  G:S → GG:S
      ⊢Kt  H:S → HH:S
      ⊢Kt  FF:S → F:S
      ⊢Kt  PP:S → P:S


============================
Doxastic and Epistemic Logic
============================

   Knowledge is justified true belief.  Epistemic logic is the logic of
   knowledge.  Alethic Modal Logic is about Truth.  Doxastic Logic, the
   logic of belief.

   Language
      K(s)(b)   s knows b.
      B(s)(p)   s believes p.

   Semantics
      Epistemic Accessibility Relation
      ER(i)(j)(s)  =df Ap:Aq:((K(s)(p)i ∧ qj) → -((p → -q) ∨ (q → -p)))

      Doxastic Accessibility Relation
      DR(i)(j)(s)  =df Ap:Aq:((B(s)(p)i ∧ qj) → -((p → -q) ∨ (q → -p)))

      agent s believes p in world i
      B(s)(p)i  =df  Aw:Dr(i)(w)(s) → pw)   (BelDef in Proofs)

      agent s knows that p in world i
      K(s)(p)i  =df  Aw:(ER(i)(w)(s) → pw)  (KnwDef in Proofs)

Axiom K (Doxastic & Epistemic)
   Alethic (Axiom K):      □ (A → B) → (□ A → □ B)
   Deontic (Axiom K):      OB(p → q) → (OB(p) → OB(q))
   Temporal (Axiom KG):    G(p → g) → (G(p) → G(q))
   Temporal (Axiom KH):    H(p → q) → (H(p) → H(q))
   Epistemic (Axiom K):    K(s)(p → q) → (K(s)(p) → K(s)(q))
   Doxastic (Axiom K):     B(s)(p → q) → (B(s)(p) → B(s)(q))

Axiom D (Doxastic & Epistemic)
   Alethic (Axiom D):      □ A → ◇ A
   Deontic (Axiom D):      OB(p) → PE(p)
   Temporal (No End):      G(p) → F(p)
   Temporal (No Begin):    H(p) → P(p)
   Epistemic (Axiom D):    K(s)(p) → -K(s)(-p)
   Doxastic (Axiom D):     B(s)(p) → -B(s)(-p)
            The -K(s)(-P) is akin to -◇ -P, but Epistemic, and Doxastic don't
            have a weak operator.

Axiom T (Doxastic & Epistemic)
   Alethic (Axiom T):      □ A → A
   Deontic (Axiom T):      OB(p) → p
   Temporal (Axiom TG):    G(p) → p
   Temporal (Axiom TH):    H(p) → p
   Epistemic (Axiom T):    K(s)(p) → p
   Doxastic (Axiom T):     B(s)(p) → p

   Alethic:                A → ◇ A
   Deontic:                p → PE(p)
   Temporal:               p → F(p)
   Temporal:               p → P(p)

Axiom 4 (Doxastic & Epistemic)
   Alethic (4):            □ A → □ □ A
   Temporal (4):           G(p) → G(G(p))
   Epistemic (4):          K(s)(p) → K(s)(K(s)(p))
   Doxastic (4):           B(s)(p) → B(s)(B(s)(p))

Axiom 5 (Doxastic & Epistemic)
   Alethic (5):            ◇ A → □ ◇ A
   Epistemic (5):          -K(s)(p) → K(s)(-K(s)(p))
   Doxastic (5):           -B(s)(p) → B(s)(-B(s)(p))
      These are too strong.

   Corollary
      Epistemic:           K(s)(p) ∨ K(s)(-K(s)(p))
      Doxastic:            B(s)(p) ∨ B(s)(-B(s)(p))

Axiom 4.2 (Doxastic & Epistemic)
   Epistemic (4.2):        -K(s)(-K(s)(p)) → K(s)(-K(s)(-p))
   Doxastic (4.2):         -B(s)(-B(s)(p)) → B(s)(-B(s)(-p))
      These are too strong.

   Corollary
      Epistemic:           K(s)(-K(s)(p)) ∨ K(s)(-K(s)(-p))
      Doxastic:            B(s)(-B(s)(p)) ∨ B(s)(-B(s)(-P))

Axiom 4.3 (Doxastic & Epistemic)
   Epistemic (4.3):        K(s)(K(s)(p) → K(s)(q)) ∨ K(s)(K(s)(q) → K(s)(p))
   Doxastic (4.3):         B(s)(B(s)(p) → B(s)(q)) ∨ B(s)(B(s)(q) → B(s)(p))
      These are too strong.

   Corollary
      Epistemic:           K(s)(-K(s)(p) ∨ K(s)(q)) ∨ K(s)(-K(s)(q) ∨ K(s)(p))
      Doxastic:            B(s)(-B(s)(p) ∨ B(s)(q)) ∨ B(s)(-B(s)(q) ∨ B(s)(p))

Axiom 4.4 (Doxastic & Epistemic)
   Epistemic (4.4):        p → (-K(s)(-K(s)(p)) → K(s)(p))
   Doxastic (4.4):         p → (-B(s)(-B(s)(p)) → B(s)(p))
      These are too strong.

Notions
-------

   Ba:P, a believes P
   Ka:P, a knows P


Definitions
-----------

   DEF C.   C:S  =df  -B:-S    (Maybe 'conceive'?)
   DEF P.   P:S  =df  -K:-S    (Maybe 'ponders'?)


System Kt

Derived Rules

   DIST-K.  K:(R → S) → (K:R → K:S)
   M-K.     K:R → R
   KK.      K:R → KK:R

   Which is S4

Problem with Kx:

   The epistemic necessitation rule entails that all tautologies are known.

         if  ⊢E P  then  K:P

   @@@ Seems equivalent to Fitch's knowability paradox.

Problem with Kx:

   (K) entails that knowledge is closed under implication, ie. that whenever
   we know a conditional and know it's antecedent, we know its consequent.

         K:(P → Q)   then   K:P → K:Q

      1.  I know that, I'm seeing a book.
      2.  I know that, if I'm seeing a book then I'm not a brain in a vat.
      3.  I don't know that I'm not a brain in a vat.

      Ki:S
      Ki:(S → -V)
      -Ki:-V

   Which can't all be true in epistemic S4.

Problem with Kx:

   Claims that whatever we know is something we know that we know.

         K:P → KK:P

   KK seems most suitable for a very strong idealized notion of knowledge.

   Ordinarily it seems odd that if one knows something, they have knowledge
   that they know it.

Reinterpretation of Kx:

   One could take Kx:P to mean, x is in a position to know P.
   (Not quite the same as saying ◇ K:P)

   This seems to fix the above problems.

Problem with Bx:

   Similar notions about Bx: such as, all tautologies are believed, and belief
   is closed under implication, are even more worrisome.

   One natural formulation of doxastic logic would be KD4.

         D-B.       B:P → C:P
         BB.        B:P → BB:P

   Which leads to this result.

         NonCon-B.  -(B:P ∧ B:-P)

Reinterpretation of Bx:

   These issues seem less of a problem if we take Bx:P to mean,
   x ought to believe p, or x is committed to the truth of P.

Other Accepted but Disputed Principles

         BB:P → B:P
         K:P → B:P
         B:P → K:B:P
         -K:P → K:-K:P
         P:K:P → K:P:P
         B:K:P → B:P
         -B:⊥

Philosophical Concerns

   Problem 1

   The epistemic necessitation rule entails that we know every tautology,
   and every principle of deontic logic itself.

   Problem 2

   The (K) schema entails that knowledge is closed under implication,
   i.e., that whenever we know a conditional and know its antecedent, we
   know its consequent.

   Problem 3

   Claims whatever we know is something we know that we know.

   (KK)-principle of "principle of positive introspection"

   One might take K:P to mean 'is in the position to know to know P, not
   that one actually does know that P.'

   One might alternatively take B:P to mean 'you ought to believe P', or
   that 'your beliefs make you committed to the truth of P.'


===================================
First-Order Quantified Logic (FOL=)
===================================

Language
--------

Lexemes

   Non-Logical Symbols
      Object symbols (Terms)
         constants:            a...t
         variables:            u...z
      Predicates:              A...Z,=

   Logical Symbols
      Truth-Function Symbols:  →, ⊥
      Association Symbols:     (, )
      Quantifiers
         universal:            ∀x (A is inverted)

Grammar (Rules for wffs)

   An ATOMIC FORMULA is either ⊥, or a predicate symbol followed
   by zero or more constants, or x=y (where, x,y are const and could
   be the same symbol).

   1.  Every atomic formula is a wff.
   2.  If P,Q are wffs, then (P → Q) is a wff.
   3.  if P(c) is a wff, then so is ∀xP(x/c)
   4.  Nothing else is a wff.

   Notes

   - To aid readability of a wffs we adopt the convention that if a wff
     that begins with '(', we will drop the outer-most pair of parenthesis.

   - We'll often use letters from the end of the alphabet (x, y and z), like
     pseudo variables to serve as place-holders for arbitrary object symbols.

   - In practice it's common to use tick marks or numerical subscripts
     (we use postscripts) after the proposition symbol to increase to
     infinity the number of available symbols.

   - Identical permutations of symbols that form atomic single formulas should
     be treated as if they were the same proposition symbol, while different
     permutations ought be regarded as different proposition symbols.

Definitions
   
      Def -:    -P         =df  (P → ⊥)
      Def ∧:    (P ∧ Q)    =df  -(P → -Q)
      Def ∨:    (P ∨ Q)    =df  (-P → Q)
      Def ↔ :   (P ↔ Q)    =df  ((P → Q) ∧ (Q → P))
      Def ∃:    ∃xP        =df  -∀x-P

Definite Descriptors

   A DEFINITE DESCRIPTOR is a lot like a singular term is Aristotelian Logic.
   We can define the concept upon thing we already have.

      ix:Px,   the x such that Px.

      ix:Kx    The king of France

   A definite descriptor expression denotes an object symbol.  So it's not
   a wff or an atomic formula.  We need to make it an argument of a predicate
   (as with any other object symbol) to have a wff.

      Qix:Kx   The king of France is married to the queen.

   We can define this general statement in terms of ∃x and A:.

      Qix:Px  =df  ∃x(∀x(Py ↔ x=y) ∧ Qx)

First-Order Quantification Calculus (FOC - Fitch Style)
-------------------------------------------------------

Regarding Inference Rules

   P(Q) indicates that a wff P contains one or more occurrences of
   sub-expression Q.

   P(R/Q) indicates the result of replacing one or more occurrences
   of Q in P with R.  R/Q is read, "R replaced one or more occurrences of Q".

   P(R//Q) like above but indicates replacing all occurrences of Q in P with
   R.  R//Q is read, "R replaced all occurrences of Q"

   P(c),P(a/c),P(a//c), similar to the above but a and c are object symbols.

   [ ... ] indicates that the enclosed must exist, be defined or proven
   elsewhere.

Inference Rules (TFC)

   All the primitive inference rules from system TFL (→ E, -I, RE, -E, ...)
   are carried over to FOL.  All derived rules carry over as well.

Inference Rules for Quantifiers

   let c represent some constant symbol, and x represent some variable.

   ================================  =========================================
   Name/Alternate Names              Rule
   ================================  =========================================
   Universal Elimination (A:E)       From ∀xP infer P(c//x);
                                     where c is any const.

   Universal Introduction (A:I)      From a subproof with hypothesis [c] and
                                     ending Q(c), close the subproof and
                                     infer ∀xQ(x//c); where c is new.
                                    
   Identity Elimination (=E)         From a=b, and P(a) infer P(b/a).

   Identity Introduction (=I)        Introduce a=a (for any a) as a new line
                                     in the proof.
   ================================  =========================================

   These rules are sometimes represented more visually.  The horizontal bar
   denotes 'infer', vertical lines denote subproofs, other symbology comes
   directly from my modified sequent notation.

      +-------------------------------+-------------------------------+
      | ============================= | ============================= |
      |  ∀:E                          |  ∀:I                          |
      | ============================= | ============================= |
      |   ∀xP                         |   |   [c]  (new c)            |
      |  --------                     |   |   ...                     |
      |   P(c/x)  (any c)             |   |   Q(c)                    |
      |                               |  ------------                 |
      |                               |   ∀xQ(c//c)                   |
      |                               |                               |
      | ============================= | ============================= |
      |  =E                           |  =I                           |
      | ============================= | ============================= |
      |   a=b                         |                               |
      |   P(a)                        |  -----                        |
      |  --------                     |   a=a        a is any const   |
      |   P(b/a)                      |                               |
      |                               |                               |
      +-------------------------------+-------------------------------+

Deriving a Robust Fitch

   ================================  =========================================
   Name/Alternate Names              Sequent
   ================================  =========================================
   Existential Elimination (∃E)      From ∃xP(x), and a subproof with
                                     hypothesis [C] P(c//x) and ending Q,
                                     close the subproof and infer Q all within
                                     the same subproof; where c is new.

   Existential Introduction (∃I)     From P(c), infer ∃xP(x/c); all within
                                     the same subproof.
   ================================  =========================================

      +-------------------------------+-------------------------------+
      | ============================= | ============================= |
      |  ∃E                           |  ∃I                           |
      | ============================= | ============================= |
      |   ∃xP(x)                      |   P(c)                        |
      |   |   [c] P(c//x)  (new c)    |  -----------                  |
      |   |   ...                     |   ∃xP(x/c)                    |
      |   |   Q                       |                               |
      |  ---------------              |                               |
      |   Q                           |                               |
      |                               |                               |
      +-------------------------------+-------------------------------+

Derived Inference Rules

   ================================  =========================================
   Name/Alternate Names              Sequent
   ================================  =========================================
   Dual                              ⊢  -∀x-P ↔ ∃xP
                                     ⊢  -∀xP ↔ ∃x-P
                                     ⊢  ∀x-P ↔ -∃xP
                                     ⊢  ∀xP ↔ -∃x-P
   =Symmetry (=Sym)                  a=c  ⊢  c=a
   =Transitivity (=Trans)            a=c, c=e  ⊢  a=e
   ================================  =========================================


Proofs
------

∃Lemma (∃Lemma):  ∃xPx, ∀x(Px → Q) ⊢QL Q
proof
01.   ∃xPx                   A
02.   ∀x(Px → Q)             A
03.   -∀x-Px                 1 DEF ∃
04.   |   -Q                 H (for -I)
05.   |   ∀x(Px → Q)         2 RE
06.   |   Pc → Q             5 A:E (c/x)
07.   |   -Pc                4,6 MT
08.   |   ∀x-Px              7 A:I (x/c)
09.   |   -∀x-Px             3 RE
10.   |   ⊥                  8,9 EFQ
11.   --Q                    4-10 -I
12.   Q                      11 -E
QED

Existential Introduction (∃I)  ∃xP(x), ( [c] P(c//x) ⊢ Q ) ⊢ Q
Schematic Proof
 i.   ∃xP(x)                 A
 j.   |[c]P(c)               H (for → I)
      |   ...
 k.   |   Q
 k+1. P(c) → Q
 k+2. ∀x(Px → Q)             k+1 ∀I
 k+3. Q                      j,k+2 ∃Lemma
QED


Existential Elimination (∃I)  P(c) ⊢  ∃xP(x/c)
Proof
01.   P(c)                   A
02.   |   -∃xP(x)            H (for -I)
03.   |   ∀x-P(x)            2 Def ∃
04.   |   -P(c)              3 ∀E (c/x)
05.   |   P(c)               1 RE
06.   |   ⊥                  4,5 ⊥
07.   --∃xP(x)               1-6 -I
08.   ∃xP(x)                 7 -E
QED

=Symmetry (=Sym):   a=c  ⊢  c=a
=Commutation (=COM)
   let Ixy, be a dummy identity predicate
Proof
01.   a=c                    A
02.   a=a                    =I
03.   Iaa                    2 DEF=
04.   Ica                    1,4 =E
05.   c=a                    
QED

=Transitivity (=Trans):  a=c, c=e  ⊢  a=e
   let Ixy, be a dummy identity predicate
Proof
01.   a=c                    A
02.   c=e                    A
03.   Ice                    DEF=
04.   c=a                    1 =Sym
05.   Iae                    =E
06.   a=e                    DEF=
QED


==========================================
Modal First-Order Quantified Logic (MFOL=)
==========================================

Language
--------

Lexemes

   Non-Logical Symbols
      Object symbols (Terms)
         constants:            a...t
         variables:            u...z
      Predicates:              A...Z,=

   Logical Symbols
      Truth-Function Symbols:  →, ⊥
      Association Symbols:     (, )
      Modal Symbols:           □
      Quantifiers
         universal:            ∀x (A is inverted)

Grammar (Rules for wffs)

   An ATOMIC FORMULA is either ⊥, or a predicate symbol followed
   by zero or more constants, or x=y (where, x,y are const and could
   be the same symbol).

   1.  Every atomic formula is a wff.
   2.  If P,Q are wffs, then (P → Q) is a wff.
   3.  if P(c) is a wff, then so is ∀xP(x/c)
   4.  If P is a wff, then □ P is a wff.
   5.  Nothing else is a wff.

Definitions
   
      Def -:    -P         =df  (P → ⊥)
      Def ∧:    (P ∧ Q)    =df  -(P → -Q)
      Def ∨:    (P ∨ Q)    =df  (-P → Q)
      Def ↔ :   (P ↔ Q)    =df  ((P → Q) ∧ (Q → P))
      Def ◇ :   ◇ P        =df  -□ -P
      Def ∃:    ∃xP        =df  -∀x-P


Semantics
---------

   The semantics are the same as for Modal Truth-Functional Logic.

Example First-Order Modal Forms
-------------------------------

         ◇ ∀xAx          Everyone could be above average
         ∀x◇ Ax          Anyone could be above average

         □ Px            P is a necessary (essential) property of x
         (Px ∧ ◇ -Px)    P is a contingent (accidental) property of x

         Simple Necessity
         ∀x(Px → □ Qx)   All bachelors are inherently unmarriable.
                         All bachelors has the essential proprerty of
                             being unmarriable.

         Conditional Necessity
         □ ∀x(Px → Qx)   It's necessarily true that all bachelors are
                         unmarried.

         But translate something like, "All P's are necessarily Q's" into
         both forms

         ∀x(Px → □ Qx)
         □ ∀x(Px → Qx)


Calculus
--------

   We will prepend 'q' to the name of a modal system to indicate that it's
   the MFOL= version.

   System qK:  The system obtained from FOL= by adding '□ ' to the syntax
   and □ I and □ E as additional inference rules.

   System qT (qM):  The system is obtained from qK by adding every instance
   of schema M as an axiom.

   System qB:  The system obtained for qT by adding every instance of
   schema B as an axiom.

   System qS4:  The system obtained from qT by adding every instance of
   schema 4 as an axiom.

   System qS5:  The system obtained from qT by adding every instance of
   schema 5 as an axiom.

   ================================  =========================================
   Name/Alternate Names              Sequent
   ================================  =========================================
                                     ⊢qK  ∀x(□ Fx ↔ □ ∀y(x=y → Fy))
   BF                                ⊢qK  ∀x□ Px ↔ □ ∀xPx
   ================================  =========================================

Proofs

   ⊢ qK  ∀x(□ Fx ↔ □ ∀y(x=y → Fy))
Proof
01.   |   □ Fc                    H (for → I)
02.   |   |□                      H (for □ I)
03.   |   |   Fc                  1 □ E
04.   |   |   |   c=d             H (for → I)
05.   |   |   |   Fc              3 RE
06.   |   |   |   Fd              4,5 =E
07.   |   |   c=d → Fd            4-6 → I
08.   |   |   ∀y(c=y → Fy)        7 ∀I
09.   |   □ ∀y(c=y → Fy)          2-8 □ I
10.   □ Fc → □ ∀y(c=y → Fy)       1-9 → I
11.   |   □ ∀y(c=y → Fy)          H (for → I)
12.   |   |□                      H (for □ I)
13.   |   |   ∀y(c=y → Fy)        11 □ E
14.   |   |   c=c → Fc            13 ∀E (c/y)
15.   |   |   c=c                 =I
16.   |   |   Fc                  14,15 → E
17.   |   □ Fc                    11-16 □ I
18.   □ ∀y(c=y → Fy) → □ Fc       11-17 → I
19.   □ Fc ↔ □ ∀y(c=y → Fy)       10,18 ↔ I
20.   ∀x(□ Fx ↔ □ ∀y(x=y → Fy))   19 ∀I (x/c)
QED


BF   ⊢qK  ∀x□ Px ↔ □ ∀xPx
Proof
01.   |   ∀x□ Px                  H (for → I)
02.   |   □ Pc                    1 A:E (c/x)
03.   |   |□                      H (for □ I)
04.   |   |   Pc                  2 ∀E
05.   |   |   ∀xPx                4 ∀I (x/c)
06.   |   □ ∀xPx                  3-5 □ I
07.   ∀x□ Px → □ ∀xPx             1-6 → I
08.   |   □ ∀xPx                  H (for → I)
09.   |   |[c]                    H (for ∀I)
10.   |   |   □ ∀xPx              8 RE
11.   |   |   |□                  H (for □ I)
12.   |   |   |   ∀xPx            10 □ E
13.   |   |   |   Pc              12 ∀E (c/x)
14.   |   |   □ Pc                11-13 □ I
15.   |   ∀x□ Px                  10-14 ∀I (x/c)
16.   □ ∀xPx → ∀x□ Px             8-15 → I
17.   ∀x□ Px ↔ □ ∀xPx             1-6 → I
QED

================
Free Logic (FL=)
================

FREE LOGICS are logics in which not all constant object symbols denote
objects.  Therefore it's necessary to introduce notation for existence.

         E!c  =df  ∃xx=c    (where c is any constant object symbol)

Primitive Inference Rules

   ================================  =========================================
   Name/Alternate Names              Rule
   ================================  =========================================
   Universal Elimination (∀ E)       from ∀xPx infer E!c → Pc.

   Universal Introduction (∀ I)      Where no premises or undischarged
                                     hypotheses of the subproof contain the
                                     constant c, from E!c → Pc infer ∀xPx,
                                     provided c doesn't occur in ∀ x Px and 
                                     c doesn't already occur in Pc within the
                                     scope of a quantifier binding the
                                     variable x.
   ================================  =========================================

Identity

   The =E and =I rules come into free logic unchanged.

Derived Rules

   ================================  =========================================
   Name/Alternate Names              Rule
   ================================  =========================================
   Existential Elimination (∃E)      From ∃xP(x), and subproof with
                                     hypothesis E!c ∧ P(c) where c is new and
                                     conclusion Q, infer Q.

   Existential Introduction (∃I)     From E!c ∧ P(c) infer ∃xP(x/c).
   ================================  =========================================
   

Modal Extensions of FL=
-----------------------

As with FOL= the modal extensions are arrived at by adding the definitions,
rules and axioms of one of our modal truth-functional logics to FL=.  We'll
use a 'f' prefix to names to indicate that we intend the free logic
equivalent.

   System fK:  The system obtained from FL by adding □  to the syntax of the
   language, and the inference rules □ I and □ O.

   System fT/fM:  The system obtained from fK by adding every instance of
   axiom schema M as an axiom.

   System fS4:  The system obtained for fT by adding every instance of
   axiom schema 4 as an axiom.

   System fS5:  The system obtained for fT by adding every instance of
   axiom schema 5 as an axiom.

Rigid Constants
---------------

Saul Kripke argued in *Naming and Necessity* that the objects that constant
object symbols denote exist in all possible worlds, and hence both identity
and negated identity atomic formulas are all necessary.

         a=a → □ a=a

         c=i → □ c=i

         -x=y → □ -x=y

         etc.

This avoids the pitfall of not being able to bring an identity into a boxed
proof.  However, it also means that the universes for possible worlds are
supersets of the universes for the actual world.  Ao, a possible world either
has exactly the same members as the actual world, or has at least one more.


The Axioms of Modal Logics

     Ale  Deo  Tem  Epi  Dox
     ---  ---  ---  ---  ---
K     Y    Y    Y    C    C
Nr    Y    C    Y    N    N
D     Y    Y    C    Y    C
T     Y    N    C    Y    N
4     Y    N    Y    C    C
5     C    N    C    C    C
4.2   Y    N    ?    C    C
4.3   Y    N    ?    C    C
4.4   C    N    ?    C    C
W     N    N    C    N    N
Q     Y    C    C    Y    C

   Y, Yes
   N, No
   C, Controversial


