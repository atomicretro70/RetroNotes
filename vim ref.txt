##############################################################################
##############################################################################
##############################################################################
##############################################################################
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######          ##############################################          ######
######          ##############################################          ######
######          ###                                        ###          ######
######          ###              Retro Notes               ###          ######
######          ###                                        ###          ######
######          ###              GVIM Editor               ###          ######
######          ###                                        ###          ######
######          ##############################################          ######
######          ##############################################          ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                     AtomicRetro@outlook.com                      ######
######                                                                  ######
######                     Revision:  20.10.05                          ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
##############################################################################
##############################################################################
##############################################################################
##############################################################################

....|....1....|....2....|....3....|....4....|....5....|....6....|....7....|...


==============================
To View This Document Properly
==============================
* Best if viewed in VIM using with settings
     :set columns=80
     :set encoding=utf-8

* This document must be viewed with a mono-spaced font to enjoy the layout,
  tables and diagrams.

* This document must be viewed in an editor that can display unicode utf-8.


||||| Writing & Quitting |||||||||||||||||||||||||||||||||||||||||||||||||||||

   Command              Description
   -------------------  ------------------------------------------------------
   :w[!]                write [! ignores warnings]
   ZQ                   quit vim (same as :q!)
   ZZ                   write if modified then quit (same as :wq)


||||| Moving |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

Move Commands

   syntax:  [n] mov

         n         1, unless specified
         mov       movement command

   Movement Command     Description
   -------------------  ------------------------------------------------------
      Up Down Left Right

n  h                    n cols left (aliases left, bkspace, ^H)
n  l                    n cols right (aliases right, space)
n  k                    n lines upward (aliases up, ^P)
n  j                    n lines downward (aliases down, ^J, ^N)

      By Column
-  0                    col 1 of cur line
-  ^                    first non-blank col of cur line
-  g_                   last non-blank col of cur line
n  |                    col n of cur line
n  $                    eol n-1 lines down from cur line

      By Lines

n  -                    first non-blank col n lines up
n  +                    first non-blank col n lines down (aliases CR, ^M)
n  _                    first non-blank col n-1 lines down
n  gg                   goto line n of file
n  G                    idem (default n=eof)
n                       move the cur n lines down

      By Text Units

n  b                    begin of word n words backwards
n  B                    idem, ignore punct
n  e                    end of word n words forwards
n  E                    idem, ignore punct
n  w                    begin of word n words forwards
n  W                    idem, ignore punct

n  (                    n sentences back
n  )                    n sentences forward
n  {                    n paragraphs back
n  }                    n paragraphs forward
-  [[                   prev section (default buf line 1)
-  ]]                   next section (default buf eof)

-  %                    go between close and open: (), {}, []

      By Marks

-  ` bkMark             bookmark
-  g ` bkMark           idem; but don't change the jumplist
-  ' bkMark             begin of line with bookmark bkMark
-  g ' bkMark           idem; but don't change the jumplist

-  ^I                   go to newer position in jumplist
-  ^O                   go to older position in jumplist
 
      By Searching

n  f char               find - nth occurrence of char right
n  F char               find - nth occurrence of char left
n  t char               to - col before nth occurrence of char right
n  T char               to - col after nth occurrence of char left
n  ;                    repeat latest (f,F,t,T) n times
n  ,                    idem, in opposite direction

n  *                    next nth occurrence of cur word
n  #                    prev nth occurrence of cur word

-  /regex[/offset]<CR>  next occurrence of /regex [move cursor to offset]
-  ?regex[?offset]<CR>  prev occurrence of ?regex [move cursor to offset]
-  search[;search]<CR>  perform successive / or ? searches
                           offsets  -[n]  nth line before occurrence
                                    +[n]  nth line after occurrence

-  n                    next - repeat latest / or ? search
-  N                    next - idem in opposite direction

      By Tags

n  :ta name             push cursor pos; go to nth def of name from tagfile
n  ^]                   idem, use cursor word for name
n  ^T                   pop pos: go back to nth pushed position on tag stack

      By Window Units

n  H                    home - line n from top line of screen
n  L                    last - line n from bottom line of screen
-  M                    first non-blank on middle line of screen


||||| Editing ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

Edit Commands

   syntax:  [n] [bkMov] [reg] edit-cmd

         n         1, unless specified
         bkMov     bookmark movement: 'name or `name
         reg       register
         mov       movement command

   Edit Command         Action
   -------------------  ------------------------------------------------------
      Inserting Text
 
n  i                    insert <text> n times before cur
n  I                    insert <text> n times before first non-blank char
n  a                    append <text> n times after cur
n  A                    append <text> n times at eol
n  R                    replace: overtype rest of line
n  c  <mov>             change n of mov with <text> (default cur)
n  cc                   change n lines with <text>
n  C                    change rest of line and n-1 next lines
n  ciw                  change entire cur word
n  s                    subst: delete n chars and subst with <text>
n  S                    subst: delete n lines and subst with <text>
-  o                    open; insert new line above cur
-  O                    open; insert new line below cur

      Visual Edit

-  v                    begin visual edit by char
-  V                    begin visual edit linewise
                           many edit commands work as expected in visual mode
                           lower case means modify selected chars
                           upper case means modify selected lines

      Cut Text Into Register

n  [reg] x              delete: cut n chars starting with cursor
n  [reg] X              delete: cut n chars before cursor

-  [reg] D              delete: cut rest of line
n  [reg] d mov          delete: cut n of cur pos thru mov
-  bkMov [reg] d mov    delete: cut bkMov thru mov

n  [reg] dd             delete lines: cut n lines from cur line
-  bkMov [reg] dd       delete lines: cut lines bkMov thru cur line

      Copy Text Into Register

n  [reg] y mov          yank: copy cur pos to mov
-  bkMov [reg] y mov    yank: copy bkMov thru mov

n  [reg] yy             yank lines: copy n lines (alias Y)
-  bkMov [reg] yy       yank lines: copy lines bkMov thru cur line

      Paste Text From Register

n  [reg] p              put: paste text n times after cursor
n  [reg] P              put: paste text n times before cursor

      (Un)indent

-  > [mov]              indent mov lines one shiftwidth
n  >>                   indent n lines one shiftwidth

-  < [mov]              unindent mov lines one shiftwidth
n  <<                   unindent n lines one shifwidth

-  = [mov]              filter mov lines through external program equalprg
-  gwip                 reflow paragraph

      Undo/Redo

n  u                    undo last n edit commands
-  U                    undo all changes on last line changed
n  ^R                   redo n edits

      Misc Editing

n  J                    join n lines incl cur line (default 2)
n  gJ                   idem but no space added between

n  ~                    change case of n chars starting with cursor
n  g~ mov               swap case up to motion
n  gu                   change to lower case up to motion
n  gU                   idem but upper case

n  rc                   replace n chars by char c (c is any char)
-  &                    repeat most recent ex :substitute command

n  .                    repeat last edit command n times

Insert Mode Commands

   Insert Mode Command  Description
   -------------------  ------------------------------------------------------
   <TAB>                TAB (alias ^I)
   ^@                   replaced with prev text inserted then exits insert
                           mode if it's first char typed and autoindent is on

   ^U                   delete from line begin to cur, insert
   ^H                   one char back (alias backspace)
   ^W                   one word back
   ^N                   insert auto-complete next match before cursor
   ^P                   idem, but prev match

   ^T                   indent one shiftwidth if it's first char typed.
   ^D                   unindent one shifwidth if it's first char typed
   0 ^D                 unindent all indentation on cur line
   ^ ^D                 idem, but it's restored on next line.

   ^V keyName           ignoring special meaning of key keyName
                           (eg. ^V <ESC>) (alias ^Q)
   ^K digraph           insert a utf-8 character (see :help digraph)

   ESC                  exit insert mode (aliases F11, ^[)

Visual Mode Commands

   Visual Mode Command  Description
   -------------------  ------------------------------------------------------
      Move

   h,j,k,l              move cursor
   aw                   a word
   as                   a sentence
   ap                   a paragraph
   a(  or  ab           a block with parentheses ( )
   i(  or  ib           idem, but an inner block
   a{  or  aB           a block with braces { }
   i{  or  iB           idem, but an inner block
   a<                   a block with angled brackets < >
   i<                   idem, but an inner block
   a[                   a block with brackets [ ]
   i[                   idem, but an inner block
   a"                   a doulbe quoted string (with quotes)
   a'                   a single quoted string (with quotes)
   a`                   a string with backticks (with backticks)

      Edit

   I                    block insert
   A                    block append
   >                    indent selected by shiftwidth
   <                    unindent selected by shiftwidth
   =                    filter lines through equalprg option command
   ~                    switch case of selected
   U                    make uppercase
   u                    make lowercase

   ESC                  unselect and exit visual mode without edits


||||| Other Commands |||||||||||||||||||||||||||||||||||||||||||||||||||||||||

   Command              Description
   -------------------  ------------------------------------------------------
      Scrolling

n  ^E                   scroll up n lines
n  ^U                   scroll up n half screens
n  ^B                   scroll up n screens
n  ^Y                   scroll down n lines
n  ^D                   scroll down n half screens
n  ^F                   scroll down n screens
n  z                    scroll line n to screen top (default cur ln)
n  z-                   scroll line n to screen bottom (default cur ln)
n  z.                   scroll line n to screen middle (default cur ln)
n  zz                   idem

      Macros

   q reg <sequence> q   macro: record <sequence>, store in reg
   @ reg                macro: run sequence stored in reg
   @@                   macro: run sequence - repeat latest @ reg command

      Other

   ^G                   show filename, modified flag, total lines
   g ^G                 show location, line, word and byte counts
   m bkMark             mark the cur pos, with bkMark
   K                    help on cur word


||||| EX Commands ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

   syntax:  : [address or range] command [options] { | anotherFullCommand }
   address:  line-address1
   range:    line-address1 (,|;) line-address2
         ,         line-address separator
         ;         idem, resets cur line to line-Address1
      
   line-address:
         n         absolute line number n.
         .         cur line.
         0         top of file.
         $         last line.
         %         All lines in the file.
         -[n]      n lines prev.
         +[n]      n lines after.
         /regex/   Next line matching pat.
         ?regex?   Previous line matching pat.

         x-n       n lines before x (a line address).
         x+n       n lines after x (a line address).

File Commands

   write, w
      [range] w[!]            write buf [or range]
      [range] w[!] [>>]file   write buf [or range] to file [>> for append]
      [range] w !command      write buf [or range] to command
         !   overwrite [cur] file ignoring warnings

   quit, q
      q[!]                    quit [! ignores warnings].

   wq, xit, x
      wq[!]                   write and quit [! overrides warnings]
      x                       idem

   edit, e
      e file                  load another file for editing

   file, f
      f file                  change filename; clear modified flag

Key Assignment Commands

   abbrev, ab, unabbreviate, una
      ab                      show all current insert mode abbreviations
      ab [abbrev text]        set insert mode abbreviation to text
      una abbrev              clear insert mode abbreviation

      Abbreviations expand to text while in insert mode.

   map, unmap, unm, verbose map, vmap, vunmap
      map [!] [char]          show all [! insert mode] mappings [for char]
      map [!] char commands   map [! insert mode] char to commands
      unm [!] char            clear [! insert mode] mapping of char
      verbose map [char]      show mappings [for char] verbosely

Search & Replace Commands

   global, g, v
      [range] g[!]/regex/[commands]

      Exec commands on every line [in range] matching regex.  If no commands,
      print all such lines.  ! means all lines NOT containing regex.  v is
      equivalent to g!

   substitute, s
      [range] s/regex/repl/[flags]
      s                       repeat last s command without the flags
      s [flags]               repeat last s command with new flags

      Replace each instance of regex in buf [or range] with repl.  If regex
      and repl are omitted, repeat last substitution.  Flags are:
         &   must appear first; keep flags from last use
         c   confirm before each substitution
         e   when search fails, continues in maps as if no error occurred
         g   replace all regex occurrences in the line
         i   ignore case for regex
         I   don't ignore case for regex
         n   report num maches without making any changes
         p   print line containing last substitute
         #   like p, but prepend the line number
         l   like p, but print the text like :list
         r   (with s no args) use latest search regex instead of from last s

External Commands

   shell, sh
      sh                      open a shell

   !, !!
      [range] !command        filter [range] lines through command
      !!                      repeat last !command

      filter with external command all lines [in range] as input to command,
      and replace the lines with the output and error output.

Other Commands

   jumps
      ju                      list the jumplist

   marks
      marks [bkMark List]     list all the [bkMark List] marks

   registers, reg
      reg [names]             list all the currently used registers [in names]

   tags
      tags                    list the tag stack

   set, se
      se                      show all options with non default values
      se all                  show all current option values
      se option?              display value of option
      se [no]option           toggle the option
      se option=value         set the option to value

   help, h, helpgrep, helpg
      h subject               show help on subject
      h string ^D             list help subjects containting string
      helpg regex             list help subjects matching regex
         special string values
         :cmd                 help on ex command cmd
         'opt'                help on vi option opt


||||| Bookmarks & Registers ||||||||||||||||||||||||||||||||||||||||||||||||||

Bookmarks

   Bookmark             Description
   -------------------  ------------------------------------------------------
   a-z                  bookmark (local within buf)
   A-Z                  bookmark (persistent across files)
   `                    cursor pos before last absolute jump
   '                    begin of line before last absolute jump
   [                    first char of the previously changed or yanked text
   ]                    last char of the previously changed or yanked text
   <                    first line of latest visual select
   >                    last line of latest visual select
   (                    start of current sentence
   )                    end of current sentence
   {                    start of current paragraph
   }                    end of current paragraph
   0                    position where vim was previously exited

Registers

   Register             Description
   -------------------  ------------------------------------------------------
   <empty>  or  ""      the default register
   "*       or  "+      system clipboard
   "a-z                 user registers
   "A-Z                 same as a-z buffers but for append
   "1-9                 most recent to least recent delete registers
   "-                   small delete register (deletions of less than a line)
   "/                   last search regex
   "~                   read only, content from last drag-n-drop of text
   "%                   current filename
   "#                   alternate filename
   ":                   latest command line
   ".                   latest inserted text
   "=                   expression register
   "_                   black hole register


||||| Regular Expressions ||||||||||||||||||||||||||||||||||||||||||||||||||||

   Sequence             Description
   -------------------  ------------------------------------------------------
      Pattern atom

   ^                    start matching from begin of a line
   $                    match regex should terminate at an eol
   .                    Matches any single character except a newline

      Pattern Qualifiers

   *                    Greedy match preceding char 0 or more times
   .*                   Matches any number of any characters
   \+                   Greedy match preceding char 1 or more times
   \?                   match preceding char 0 or 1 times
   \{-}                 Non-greedy match preceding char 0 or more times
   \{[min],[max]}       Greedy match preceding char min to max times
                           min default = 0, max default = infinity
   \{-min,max}          Non-greedy match as little as possible
   \{num}               Match exact number of times

      Character Classes

   [abcde]              match any of a,b,c,d, or e once
   [a-e]                match any of a thru e once
   [^abc]               match anything other than a,b or c
   [^a-e]               match anything other than a thru e
   \a                   match alpha              [a-zA-Z]
   \A                   match non-alpha          [^a-zA-Z]
   \l                   match alpha lower        [a-z]
   \L                   match non alpha lower    [^a-z]
   \u                   match alpha upper        [A-Z]
   \U                   match non alpha upper    [^A-Z]
   \d                   match dec digit          [0-9]
   \D                   match non dec digit      [^0-9]
   \x                   match hex digit          [0-9a-fA-F]
   \X                   match non hex digit      [^0-9a-fA-F]
   \w                   match alphanum or _      [a-zA-Z0-9_]
   \W                   match non alphanum or _  [^a-zA-Z0-9_]
   \s                   match whitespace         space and tab
   \S                   match non whitespace     other than space or tab

      Multiple and Saving Patterns

   \|                   match any regex separated by \|
                           /hand\(y\|ful\)      matches 'handy' or 'handful'
   \(...\)              Saves regex enclosed between \( and \) into a hold
                        buf.  Up to nine regexes can be saved
                           \(that\) or \(this\)
                        saves 'that' in buf 1 and saves 'this' in buf 2.
                        Held regexes can be 'replayed' in substitutions by
                        sequences \1 to \9 on the same line.
                           :%s/\(that\) or \(this\)/\2 or \1/

      Word Boundary

   \<...\>              Matches chars at the begin or at the end of a word.
                        Word boundaries are determined by punct or space.

      Search Pattern Modifiers

   \v                   helps avoid \ for regex qualifiers, grouping
                        regex, etc.
                           /\vc{5}        match exactly 'ccccc'
                           /\vabc+        match 'abc' or 'abccc', not 'ab'
                           /\vabc?        match 'ab' or 'abc'
                           /\v<his>       match whole word 'his', not 'this'
                           /\vmin|max     match 'min' or 'max'
                           /\vhand(y|ful) match 'handy' or 'handful'
                           /\v(\a)\1      match repeated alphas
   \V                   No neeed to use \ when match special chars
                           \V^.*$         matches '^.*$'
   \c                   match case insensitive
                           \cthis         matches 'this', 'This', 'thiS', ...
   \C                   match case sensitive
   \%V                  match only in area in a visual selection

      Metacharacters For Replacement Strings

   \t                   replacestring tab
   \r                   replacestring newline
   \u or \l             change next char to upper/lower case
   \U or \L             change next chars to upper/lower case
   \e or \E             end further changes in case
                           :% s/\v(\a+)/\u\1/g  Capitalize every word in buf
                           :% s/\v(\a+)/\U\1/g  Capitalize every char in buf
                           :% s/\v(\w)_(\a+)/\1\u\2/g
                                  change camel_case to camelCase
   # ^ $                can be used instead of /


||||| Options ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

   Option           Default   Description
   ---------------  --------  ------------------------------------------------
   autoindent, ai   noai      take indent for new line from prev line
   autowrite, aw    noaw      automatically write file if changed
   directory, dir   /tmp      list of directory names for the swap file
   equalprg                   external filter command for autoformat = cmd
   encoding                   select a character set to use such as utf-8
   exrc, ex         noexrc    read .vimrc and .exrc in current directory
   ignorecase, ic   noic      disregards case during a search.
   indentexpr       ""        expr to obtain proper indent for autoformat =
   list             nolist    Prints tabs as ^I; marks ends of lines with $.
   magic            magic     changes special chars in search regexes
   number, nu       nonu      Displays line nums in front of each line.
   paragraphs, para IPLPPP    nroff macros that separate paragraphs.
   prompt           prompt    enable prompt in ex mode.
   readonly, ro     noro      disallow writing the buf
   remap            remap     allows mappings to work recursively
   report           5         threshold for reporting num lines changed
   scroll           1/2 winsz lines to scroll with ^U and ^D.
   sections, sect   SHNHH HU  nroff macros that separate sections
   shell, sh        /bin/sh   name of shell to use for external commands
   shiftwidth, sw   8         num spaces to use for (auto)indent step
   showmatch, sm    nosm      briefly go to matching ( [ or { if insert one
   showmode         noshowmode  message on status line to show cur mode
   tabstop, ts      8         num spaces for TAB in file uses
   taglength, tl    0         num significant chars for a tag
   tags                       list of file names used by the tag command
   timeout, to      timeout   time out on mappings and key codes
   warn             warn      warn for shell command when buf was changed
   wrapscan, ws     ws        Searches wrap around either end of file.
   wrapmargin, wm   0         chars from right where wrapping starts
   writeany, wa     nowa      write to file with no need for ! overrides

