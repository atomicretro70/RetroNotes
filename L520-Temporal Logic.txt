##############################################################################
##############################################################################
##############################################################################
##############################################################################
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######          ##############################################          ######
######          ##############################################          ######
######          ###                                        ###          ######
######          ###              Retro Notes               ###          ######
######          ###                                        ###          ######
######          ###              Modal Logics              ###          ######
######          ###                                        ###          ######
######          ##############################################          ######
######          ##############################################          ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                     AtomicRetro@outlook.com                      ######
######                                                                  ######
######                     Revision:  20.10.05                          ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
##############################################################################
##############################################################################
##############################################################################
##############################################################################

....|....1....|....2....|....3....|....4....|....5....|....6....|....7....|...


==============================
To View This Document Properly
==============================
* Best if viewed in VIM using with settings
     :set columns=80
     :set encoding=utf-8

* This document must be viewed with a mono-spaced font to enjoy the layout,
  tables and diagrams.

* This document must be viewed in an editor that can display unicode utf-8.


========
Contents
========
   Truth-Functional Logic
      Language
      Semantics
      Calculus
      Proofs
   Alethic Modal Logic
      Intro
      Language
      Semantics
      Translation Hints
      Inferrential Systems
      Non-Hisorical Modal Systems
      Kripke Semantics
      Leibnizian Semantics (World Theory)
      System L
      Modal Truth-Trees
      Fitch Natural Deduction
   Deontic Modal Logic
      Language
      Semantics
      Inferrential Systems
      Standard Deontic Logic (SDL)
      Deontic Reductionism
      Common Sense Deontic Logic
   Temporal Modal Logic
      The Logic of Time
      Language
      Semantics
      Inferrential Systems
   Doxastic & Epistemic Modal Logics
      Language
      Semantics
      Inferrential Systems
   Relating the Systems
   FOL=
   Modal FOL=
   Free Logic (FL=)
      Modal extensions of FL=

   Appendix A: TFL Proofs


===========
Tense Logic
===========

   The logic of time.

The Instant Model of Time
   Instants are individual moments in time.  They are points on a timeline.
   They do not have a duration.  Instants are going to be understood in terms
   of the binary relation of precedence (<).  We will generally use x, y,
   and z to represent generic time instants and t,t',t'' to represent
   specific time instants.

The Interval Model of Time
   The interval model deals with time in durations, or intervals.  It's more
   expressive than the instant model, but also more complicated.

   'intervals' are periods of time that are defined by a starting instant and
   a final instant.  Intervals can be used to speak about instants by
   createing 'point intervals' where the start and end points are the same.
   In addition to the precedence relation (<), interval based
   models of time include the overlap relation (O) and the inclusion relation
   (<=).

Language
   The following language is constructed on top of FOL.

   Lexeme
      binary:    <    (called the precedence relation)
      constant:  t    (time now)

   syntax
      i. if x,y are instants, x<y and x<=y are wffs.

   semantics
      (x<y), says 'instant x precedes instant y in time'.
      (x<=y), says 'instant x precedes or is equal to instanty y in time'.

   Definition
      Precedence-Equality Definition (PEqD)
         (x<=y)  =df  ((x<y) ∨ (x=y))
                      Less than or equal to

   Examples
      - OB(a<=m), It is obligatory that you arrive at or before the start
                  of the meeting.

Is Precedence Reflexive?
   If a relation is reflexive, that means that it applies to itself.
   Some people take precedence as reflexive some do not.

   If precedence is irreflexive, that means that no moment is before
   itself.  No instant bears the precedence relation to itself.
      ∀x:-(x<x)      (IrPT)

   But we can also take another meaning of precedence and claim that every
   instant bears the precedence relation to itself.
      ∀x:(x<x)       (RePT)

   Generally, one that asserts the precedence relation is reflexive will
   also assert that it is anti-symmetrical (if two instants are before
   the other, they are the same instant)
      ∀x:∀y(((x<y) ∧ (y<x)) → x=y)          (ASPT)

The Transitivity of Time
   Transitivity (TrPT)
      ∀x:∀yAz:(((x<y) ∧ (y<z)) → (x<z))     (TrPT)

The Connectedness of Time
   Connectedness, or trichotomy is a property that we have not seen
   before, but it is going to be important for some, but not all of
   the temporal logics that we are going to look at.  Simply, given
   any two instants, either one is before the other or they are
   identical.
      ∀x:∀y(((x<y) ∨ (y<x)) ∨ x=y)      (CoPT)

The Density of Time
   For any two points in time there is a third between them.

   Consider the set of integers.  They are not dense because we could begin
   with two successive integers in which case there will be no third one in
   between them.  However, the set of all real numbers is dense.

   If you accept density (like a real number) then include this property.
      ∀x:∀y((x<y) → Ez:((x<z) ∧ (z<y)))    (DnPT)

Predecessors and Successors in Time
   Predecessorship claims that each instant has an immediate predecessor
      and there are not other instants in between.
   Successorship claims the same about successors.

   Examples
      - The integers each have one and only one immediate predecessor
        one and only one immediate successor.

   If you think that the instants of time have no beginning, no end and
   are not dense, in effect all have immediate predecessors and successors,
   you would say that the precedence relation has the predecessorship
   and successorship properties.

      ∀x:Ey:((x<y) ∧ Az:((x<z) → (y<=z)))     (ISPT)
         Every instant has an immediate successor.  Take the case where y
         is immediate successor x, then y<=z.

      ∀x:Ey:((y<x) ∧ Az:((z<x) → (z<=y)))     (IPPT)
         Every instant has an immediate predecessor.

Discreteness of Time
   *These definitions may not be quite right*
   Forward Discreteness, every instant has an immediate predecessor.
   Backward Discreteness,every instant has an immediate successor.

   Logically
      *I don't know if these are correct or if they should look like
       the two formal axioms stated in Predecessors and Successors in
       Time.*
      Forward Discreteness  (FDPT)
         ∀x:Ey:((x<y) → Ey:((x<y) ∧ Az:((x<z) → (y<=z))))

      Backward Discreteness (BDPT)
         ∀x:Ey:((y<x) → Ey:((y<x) ∧ Az:((z<x) → (z<=y))))

Beginnings and Endings
   To say that there is no beginning and not end to our timeline.

   No Beginning (NBPT)
      ∀x:Ey:(y<x)
   No Ending (NEPT)
      ∀x:Ey:(x<y)
   Beginning (BePT)
      -∀x:Ey:(y<x)            (Negation of No Beginning)
   Ending (EnPT)
      -∀x:Ey:(x<y)            (Negation of No Ending)

   Notes:
   - If we have predecessorship we don't need no beginning (because it
     says the same thing).
   - If we have successorship we don't need no ending (because it says
     the same thing).
   - However, they would be needed for a dense time line.

Table - Kinds of time
   Use this table to decide which set of axioms you need to describe the
   timeline for the system you are modeling.

            No End         End             No End         End
            No Begin       No Begin        Begin          Begin

    Not     Integers       Neg Integers    Pos Integers   Integers: 1..9
    Dense   predecessor    Predecessor     Successor      Bkw Discrete
            successor      Fwd Discrete    Bkw Discrete   Fwd Discrete
            NEPT NBPT      End             Begin          Begin
            FDPT BDPT      NBPT, BDPT      NEPT, FDPT     End

    Dense   Rationals      Neg Rationals   Pos Rationals  Rationals: 0..1
            Density        Density         Density        Density
            No Begin       No Begin        Begin          Begin
            No End         End             No End         End

Well Ordering
   Well ordering is actually a property of the precedence relation and the
   timeline that we are not going to be able to express in FOL.

   Well Ordering means that for all (non-empty) sets of instants (even
   infinite sets) there is always a least member.

   Examples
      The set of all positive integers.
      Any subset of all positive integers.
      The set of rational numbers is not well ordered because it's dense.
      
   Formally
      We need to borrow some set theory concepts. We'll use A..Z as sets,
      'in' as the set membership operator, and 'null' as the null set.

         AA:(-(A=null) → Ex:((x in A) ∧ ∀y((y in A) → (x <= y))))

            For all sets A, where A is non-empty implies there exists some
            instant x such that, x in A and for any y, y in A implies x <= y.

   Notes
      - Well Ordering may only be appropriate for discrete sets such as
        integers rather than rationals.

Arthur Prior's Tense Operators
   Operators
      H(r),  It has always been the case that, r.
      P(q),  It has at some point in the past been the case that, q.

      G(s),  It will always be the case that, s.
      F(p),  It will at some point in the future be the case that, p.

      E(p),  It will be the case at some point in time that, p.
      A(p),  It is the case at all points in time that, p.

   Valuation
      Take qy as proposition q is true at instant y.  If no subscript is
      present we'll consider t as now.

   Formal Definitions (TODEF)
      H(p)t  =df  ∀x:((x<t) → px)
         H(p)t, is defined as,
         At all instants prior to now, p is true.
      P(p)t  =df  Ex:((x<t) ∧ px)
         P(p)t, is defined as,
         At some instant prior to now, p is true.

      G(p)t  =df  ∀x:((t<x) → px)
      F(p)t  =df  Ex:((t<x) ∧ Px)
      
      The next two are defined in terms of the above four.

      E(p)t  =df  P(p)t ∨ (pt ∨ F(p)t)
         E(p)t is defined as, p was the case before now, or p is the case
         now, or p will be true the case after now.

      A(p)t  =df  H(p)t ∧ (pt ∧ G(p)t)
         A(p)t is defined as, p had always been the case before now,
         and p is the case now, and p will always be the case after now.

Semantics of Prior's Tense Operators
   The meanings of the operators can be expressed graphically along a
   timeline.  Below we will assume that our timeline is connected (there are
   no branches), transitive, and precedence is irreflexive.

   Examples
      - P(p)t, means that P(p) at time t (in a timeline):

                           P(p)
        <    |    |    |    |    |    |    |    |    >
                            t

        which in turn means, p is true at some instant prior to t.

                  p        P(p)
        <    |    |    |    |    |    |    |    |    >
                            t

   It may seem more complex with combinations of tense operators but 
   just analyze it using the same principles.
      - Try HF(p)t.

                          HF(p)
        <    |    |    |    |    |    |    |    |    >
                            t

        So F(p) is true at every instant prior to t.
            F(p) F(p) F(p)HF(p)
        <    |    |    |    |    |    |    |    |    >
                            t

        Now p is true at some point after F(p), which means at time t or
        later.
                            p    p    p    p    p
            F(p) F(p) F(p)HF(p)
        <    |    |    |    |    |    |    |    |    >
                            t

Naturalism
   Ontological Naturalism
      The kinds of entities we think exist.
      Committed to the claim that there are not entities that can have an
         influence on the physical world which are not themselves physical.
      This still allows for nonphysical entities that lack a direct influence
         on the physical world (eg. math, logic, etc.).  This commits the
         ontological naturalist to the denial that there is something
         outside our brains, a mind or soul, which influences the physical
         world in some way.
      Opponents assert that there are some nonphysical entities which can
         affect the physical world.  Within ontological naturalism there
         is disagreement as to what constitutes influence, and what
         constitutes a physical entity.

   Methodological Naturalism
      How philosophy should use the methods of science.
      Cencerned with the methods of philosophy and their connection to
         science.  Simply put they hold that both science and philosophy
         are searching for non-definitional (synthetic) truths by using
         sense experience (a posteriori means).
      They mad distinguish science and philosophy in different ways.  They
         may do so by content, effectively they study different entities
         (sci studies chems, phil studies conditionals).  They may also 
         differentiate by scope (phil deals with gen questions - e.g. what
         is property? - while sci deals with more specific questions -
         what does it mean for something to have mass?).  No matter the
         method of differentiation they will assert that these two fields
         are engaged in the same project: to learn synthetic truths about
         the world.
      Oppoents assert that phil uses methods independent of experience to
         investigate (a priori) or that phil engages in the pursuit of truths
         about definitions, or analytic truths.

Comparing Alethic & Temporal logic
   Temporal, alethic and deontic are isomorphically similar.

   Operators
      Strong Operators:  □   OB  H  G
      Weak Operators:    ◇   PE  P  F

   Table

      Alethic      Deontic      Temporal
                                Past         Future
      -----------  -----------  -----------  -----------
      □ p          OB(p)        H(p)         G(p)
      ◇ p          PE(p)        P(p)         F(p)
      □ p =df      OB(p) =df    H(p) =df     G(p) =df
         -◇ -p        -PE(-p)      -P(-p)       -F(-p)

   Change of Temporal Quantifier (CTQ)
      Definitions
         H(p)  =df  -P(-p)
         G(p)  =df  -F(-p)

System Kt (Minimal Temporal Logic)
   System Kt is an isomorphism to alethic modal logic's System K.  'K' from
   Saul Kripke.  't' for temporal.  System Kt does not include the precedence
   operator.  System Kt does not assume transitive, reflexive or dense.

   System K (First Principals from Alethic System K)
      Definitions
         Alethic:             □ p    =df  -◇ -p
         Deontic:             OB(p)  =df  -PE(-p)
         Temporal:            H(p)   =df  -P(-p)
                              G(p)   =df  -F(-p)
      Axioms
         Modal Distribution Axiom (MDist)
            Alethic (MDist):  □ (A → B) → (□ A → □ B)
            Deontic (MDist):  OB(p → q) → (OB(p) → OB(q))
            Temporal (KG):    G(p → q) → (G(p) → G(q))
            Temporal (KH):    H(p → q) → (H(p) → H(q))

            if it had always been the case that, d implies m, then it has always
            been the case that d implies it has always been the case that m.

         Necessitation Rule (NR)
            Alethic:          if ⊢ A then □ A
            Deontic:          if ⊢ p then OB(p)
            Temporal (TNR):   if ⊢ p then A(p)
               if A,p are axioms or theorems ...

   System Kt Axioms
      System Kt is all of the System K principles above plus the following
      axioms.  (These axioms relate the past to the future.)
         Axiom GP (TAGP):  p → GP(p)
         Axiom HF (TAHF):  p → HF(p)

System K4t (Transitive Temporal Logic)
   Similar to Alethic System K4, which adds axiom s4 to system K.  K4t assumes
   that precedence is transitive, but the axiom is framed in terms of tense
   operators.

   Axioms
      All of the first principals of System Kt, plus the following:

      Axiom 4
         Alethic (4,s4):   □ A → □ □ A
         Temporal          G(p) → G(G(p))
           (Kt4 or TA4):   H(p) → H(H(p))

      Corollary to Axiom 4
         Alethic:          ◇ ◇ A → ◇ A
         Temporal:         F(F(p)) → F(p)
                           P(P(p)) → P(p)

   Notes
      Notice how G(G(p)) is two applications of G (which are defined using
         precedence time operator).  So, G(G(p)) is two applications of the
         precedence operator.

System S4t (Reflexive Temporal Logic)
   So far we have been assuming that precedence is irreflexive.  However some
   temporal logics are reflexive due to the inclusion of an axiom equivalent
   to the modal alethic Axiom T (or M).  Here we'll look at S4t which
   includes all of K4 plus Axiom T (or M).

   Axioms
      All of the first principals of system K4t, plus the following:

      Axiom T (T,M)
         Alethic (T,M):    □ A → A
         Deontic (T,M):    OB(p) → p
         Temporal (TAT):   G(p) → p
                           H(p) → p

      Corollary to Axiom T
         Alethic:          A → ◇ A
         Deontic:          p → PE(p)
         Temporal:         p → F(p)
                           p → P(p)

   Notes
      - These axioms and corollaries seem a little fishy to me.  I'm not sure
        I agree with them and they do seem to extend the meanings of G and H
        to include the present instant in time.
      - Because they don't make sense to me I'm generally not going to
        assume reflexivity of precedence.

System Lt (Linear Temporal)
   So far our logic has been assuming that our model is linear.  Linear
   functions effectively the same as connectedness by claiming that there's
   only one non-branching timeline.  Like Axioms GP and HF it mixes past
   and future, so it will not have an analogue in other modal logics.  Lt
   will include all of Kt, as well as 4 (transitivity) and L (Linearity).

   Axioms
      All of the first principals of System K4t

      Temporal Axiom of Linearity
         Temporal (TAL):   (F(P(p)) ∨ P(F(p))) → E(p)

System Nt (Well Ordered Temporal Logic)  Natural Numbers
   This logic is going to include everything from L, but add on three new
   axioms: No End, Forward Induction (implies backwards discreteness),
   and Well Ordering.  None of these principles is new (discussed WRT
   precedence operator), but here they are expressed with tense operators.
   We'll call this System Nt since it creates a set of time instants that
   is isomorphically similar to the natural numbers (positive integers), with
   a beginning but no end, and every number has an immediate predecessor.

   Axioms
      All of the first principals of system Lt

      Axiom D
         Alethic (D):      □ A → ◇ A
         Deontic (D):      OB(p) → PE(p)
         Temporal Axiom of
            No End (TANE):        G(p) → F(p)

      Axiom 5 (s5)
         Alethic (5):      ◇ A → □ ◇ A
         Temporal (5):     (F(p) ∧ G(p → F(p))) → G(F(p))
            Temporal Forward Induction Axiom

      Temporal Axiom of Well Ordering
         Temporal:         H(H(p) → p) → H(p)
            For any set of instances there is a least (or first).

   Notes
      - At first glance it may not be clear why these two axioms imply that
        time has no end or beginning, but you must remember that in the
        final instant of time G(p) is vacuously true for all p, and F(p)
        is false for all p.
      - Forward induction implies backward discreteness.

   Components of System Nt
      System Lt
      Temporal Axiom of Well Ordering
      Temporal Forward Induction Axiom (5)
      Temporal Axiom of No End (D)

System Zt (Inductive Temporal Logic)   Integers
   This system corresponds to the integers.  It will include both forward
   induction and backward induction (therefore both forward and backward
   discreteness).  It will include both no end and no beginning as well.

   Axioms
      All of the first principles of Lt (Liner Temporal).

      Temporal Axiom of
         No End:           G(p) → F(p)
         No Begin:         H(p) → P(p)

      Temporal Induction Axiom
         Forward:          (F(p) ∧ G(p → F(p))) → G(F(p))
         Backward:         (P(p) ∧ H(p → P(p))) → H(P(p))

System Qt (Dense Temporal Logic)    Rationals
   If time is dense that means that between any two instants there is another
   instant.  It's infinitely divisible.  This is in direct contradiction to
   forward and backward induction.  This system, which we will call Qt can
   be mapped onto the ratiional numbers since there is always another
   fraction in between any two fractions.  If you think that there are an
   infinite number of instants between any two instants then you think
   that time is dense.

   Axioms
      All of the first principles of Lt (Linear Temporal Logic)

      Temporal Axiom of
         No End:           G(p) → F(p)
         No Begin:         H(p) → P(p)

      Temporal Density Axiom:
                           G(G(p)) → G(p)
                           F(p) → F(F(p))

System Rt (Complete Temporal Logic)   Reals
   For a timeline to be complete, that instants that any set of instants that
   is defined by an instant that all instants in the set are before must be
   able to be defined by an instant that all instants in the set are before
   which is an instant in the original timeline.  This is quite perplexing,
   the best way to understand it is in terms of types of numbers.  Of the
   types of numbers we have looked at (natural numbers, integers, rational
   numbers and real numbers) rational numbers are the only ones that are not
   complete.
      
   Axioms
      All of the first principles of Qt

      Temporal Completeness Axiom
                           A(H(p) → F(H(p)) → (H(p) → G(p))





Temporal Logic Comparison

Kt = Ax K + Axioms GP,HF
   K4t = Kt + Ax s4
      s4t = K4t + Ax T
      Lt  = K4t + Linearity                                           line
         Nt = Lt + Ax D (No End) + Ax 5 (Fwd Induct) + Well Ordering  Natural
         Zt = Lt + Ax D (No End/Begin) + Ax 5 (Fwd/Bkw Induct)        Integer
         Qt = Lt + Ax D (No End/Begin) + Density                      Rational
            Rt = Qt + Completeness                                    Real


              ---  -------  ----  ------  -------  ------  --------  --------
            | Kt   K4t      S4t   Lt      Nt       Zt      Qt        Rt
            | Min  Transit  Refl  Linear  Well     Induct  Dense     Complete
            |                             Ordered
First       |
Principles  |                             Natural  Intege  Rational  Reals
----------    ---  -------  ----  ------  -------  ------  --------  --------
Def H,G       *    *        *     *       *        *       *         *
NR            *    *        *     *       *        *       *         *
MDist                                             
- KG          *    *        *     *       *        *       *         *
- KH          *    *        *     *       *        *       *         *
GP,HF         *    *        *     *       *        *       *         *
4                  *        *     *       *        *       *         *
T (M)                       *
Linear                            *       *        *       *         *
Well Ordered                              *         
5
   Fwd Induct                             *        *
   Bkw Induct                                      *
D
   No End                                 *        *       *         *
   No Begin                                        *       *         *
Dense                                                      *         *
Completeness                                                         *


The Next Time Operator
   Lexemes
      X(p), in the instant directly after this one, p.
      Y(p), in the instant directly before this one, p. (Yesterday operator)

   Definitions
      X(p)t  =df  Ex:((t<x) ∧ (∀y((t<y) → (x<=y)) ∧ px))
      Y(p)t  =df  Ex:((x<t) ∧ (∀y((y<t) → (y<=y)) ∧ px))

   Axioms
      Axiom Kx:            X(P → q) → (X(p) → X(q))
      Functionality:       -X(p) ↔ X(-p)

   Notes
      - let's break down 'next' to better understand it
        X(p)t  =df  Ex:( (t<x) ∧   (∀y( (t<y) →      (x<=y))    ∧  px))
        X(p)t  =df  Ex:(  t<x  ∧   (∀y(  t<y  →       x<=y )    ∧  px))
                   some  after &   all   after are      after or  &  px
                   time  now       times now   (implies)identical
                   x                                    to x
                             or
                   some  after and before all other              and p at
                   time  now       instants after now                that time
                             or
                   p is true in the time interval (t..y]
                   where y is arbitrarily after t.

Since and Until Operators
   Lexemes
      S(p)(q), p has been the case since a time when q.
      U(p)(q), p will be the case until such a time when q.

   Definitions
      S(p)(q)t  =df  Ex:( (x<t ∧ qx) ∧ ∀y((y<t ∧ x<y) → py))
      U(p)(q)t  =df  Ex:( (t<x ∧ qx) ∧ ∀y((t<y ∧ y<x) → py))

      S(p)(q)   =df  Ax:( x>=q → px )
   
   Notes
      - Let's break down 'since' to better understand it
        S(p)(q)t =df Ex:( ((x<t) ∧ qx)  ∧   ∀y(((y<t) ∧ (x<y)) → py))
                     Ex:( ( x<t  ∧ qx)  ∧   ∀y(  x<y<t         → py))
                    some   in the past  &   all   after then &     p
                    time   when q          times  before now
        p is true since (all instants after) q but before t. Or given the
        instants p,q,t, q < p < t.  Similarly, 'until' is t < p < q.

      - There are two ways to conceive of since and until, either as strict,
        where precedence is defined as irreflexive, or as general where
        precedence is deinfine as reflexive.  We will use U and S to refer
        to the general versions and Us and Ss to refer to the strict versions.

Axioms of Since & Until
   If we assume precedence is reflexive we can define F(p) and P(P) in terms
   of since and until.

      F(p)  =df  U(T)(p)       (where T is the Tautology symbol)
      P(p)  =df  S(T)(p)

   If p is happening in the future then all tautologies have been true up
   until p is true.  If p is happening in the past, there exists some point
   in the past where p since all tautologies have been true.

   We can define the Next and Yesterday operators in terms of the strict
   versions of these operators.

      X(p)  =df  Us(CON)(p)    (where CON is the contradiction symbol)
      Y(p)  =df  Ss(CON)(p)

   So, p will happen in the next instant if there is nothing (a contradiction)
   that will be true from now until p.

   We can defined our general operators in terms of our strict operators.

      U(p)(q)  =df  q ∨ (p ∧ Us(p)(q))
      S(p)(q)  =df  q ∨ (p ∧ Ss(p)(q))

   p is true generally until q is the same as either q is the case now (and
   it is vacuously true) or p is the case and will be structly true until q
   is the case.  The same applies to since.

LTL (Linear Time Logic)
   A common use of the time operators is a system known as LTL (Linear
   Time Logic).  This system only contains operators that deal with the
   future, namely G, X and U.  It's commonly used in Computer Science.

   Definitions
      Definition of X
                           X(p)t  =df  Ex:((t<x) ∧ (∀y((t<y) → (x<=y)) ∧ px))

      Reflexive Recursive Definition of G
                           G(p)  =df  (p ∧ X(G(p)))
                                      p is the case now an recursively at all
                                      points into the future.

      Reflexive Recursive Definition of U
                           U(p)(q)  =df  (q ∨ (p ∧ X(U(p)(q))))
   Axioms
      Modal Distribution
         Alethic:          □ (p → q) → (□ p → □ q)
         LTL (KG,MDist):   G(p → q) → (G(p) → G(q))
         LTL (KX,MDist):   X(p → q) → (X(p) → X(q))

      Necessitation Rule
         LTL (NR):         if ⊢ p then A(p)

      Next Time Functionality Axiom
                           -X(p) ↔ X(-p)

      Inductive Principle regarding X and G
                           p ∧ G(p → (q ∧ X(p))) → G(p)

      Principle Regarding Least Fixed Points and Completeness
                           G((p ∨ (q ∧ X(r))) → q) → (U(q)(p) → r)

Branching Time
   Branching time deals with the future only.  It deals with the possibility
   that there is more than one future available to us to choose from, though
   it assumes the past is static.

   Branching time models imagine that now is at the first branch on the
   trunk of a tree.  Everything before is determined, but everything after
   continues to branch off.

   However, branching time always assumes an actual future, which will
   function like the actual world does for alethic modal logic.

Ockhamist Branches of Temporal Logic
   The system of branching temporal logic that we will examine here is
   attributed by Arthur Prior to Ockham of Ockham's razor.  We will not
   get into the specific axioms of this theory here, but rather explain
   how you can express particular propositions using Ockhamist branching
   temporal logic.

   Grammar
      Often branching temporal logic uses ◇  and □  to denote "there exists
      some future timeline" and "for all future timelines" respectively.
      So that we don't confuese these with our alethic operators, we'll
      use <*> to denote "there exists some future timeline" and [*] to
      denote "for all future timelines".

      Lexemes:  [*]p       For all future timelines, p
                <*>p       There exists some future timeline where, p
                           For some future timeline, p

      To be clear, that menas that [*]p means that from the stand point of
      this instant, for all future timelines, p.  Similarly, <*>P means from
      the standpoint of this instant, there exists some future timeline such
      that, p. [*](I will eat ice cream tomorrow) means that from the
      standpoint of this instant, for all future timelines, I will eat ice
      cream tomorrow.

      Furthermore, these symbols can be combined with our future tense
      operators (though it is not clear how they would be combined for past
      tense).  <*>G(p) means that from the standpoint of this instant, there
      exists some future timeline such that, it's going to be the case at
      all future instants that, p.  [*]U(p)(q) means from the standpoint of
      this instant, for all future timelines, p will be the case until such
      time as q.  <*>F(You will eat cake) means that from the standpoint of
      this instant, there exists some future timeline such that, at some
      instant in the future, you will eat cake.

      Just as any non-quantified symbols in modal logic apply to the
      actual world, symbols without a branching temporal quantifier will
      apply to the actual future.  So F(p) → <*>F(p) means that from the
      standpoint of the current instant, if at some instant in the future
      p then there is some future timeline such that, at some instant in
      the future, p.  Or simply, the actual future is a possible future.

      Imagine that you are the only person in all of history that can invent
      immortality.  In every possible future where you die before you get
      to 100, humans will not have achieved immortality when you die, and
      never will in any future timeline.
         [*](-U(you live)(you are 100) → (-<*>F((you are dead) ∧ (there
             exists some human)(G(that human will live))))


Notions
-------

      G:S,   It's going to always be that P.
      H:S,   It has always been the case that P.


Definition
----------

      DEF F.   F:S  =df  -G:-S    (It will at some time be the case that S)
      DEF P.   P:S  =df  -H:-S    (It was at some time the case that S)


Inference System Kt
---------

      G:I, H:I,   correspond to □ I
      G:E, H:E,   correspond to □ E

   These insure that all tautologies, axioms and theorems of the system
   have always been and always will be the case.

      GP.   S → GP:S
      HF.   S → HF:S

   Duals

      ⊢Kt  PG:S → S
      ⊢Kt  FH:S → S
      ⊢Kt  G:S → GG:S
      ⊢Kt  H:S → HH:S
      ⊢Kt  FF:S → F:S
      ⊢Kt  PP:S → P:S


