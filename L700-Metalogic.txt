##############################################################################
##############################################################################
##############################################################################
##############################################################################
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######          ##############################################          ######
######          ##############################################          ######
######          ###                                        ###          ######
######          ###              Retro Notes               ###          ######
######          ###                                        ###          ######
######          ###               Metalogic                ###          ######
######          ###                                        ###          ######
######          ##############################################          ######
######          ##############################################          ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
######                     AtomicRetro@outlook.com                      ######
######                                                                  ######
######                     Revision:  20.10.05                          ######
######                                                                  ######
######                                                                  ######
######                                                                  ######
##############################################################################
##############################################################################
##############################################################################
##############################################################################

....|....1....|....2....|....3....|....4....|....5....|....6....|....7....|...


==============================
To View This Document Properly
==============================
* Best if viewed in VIM using with settings
     :set columns=80
     :set encoding=utf-8

* This document must be viewed with a mono-spaced font to enjoy the layout,
  tables and diagrams.

* This document must be viewed in an editor that can display unicode utf-8.


Formal Models
=============

   @@@ This is all from Barwise; p498
   A MODEL is the means by which we interpret a set of FOL statements
   thereby assigning truth-values.  Models are represented in set theory.

         Let M( ), be the model function.

   M is defined on the predicates, the object symbols, and the quantifier
   A:.  Such a model is called a FIRST-ORDER MODEL provided the following
   conditions are satisfied:

         1.  M(A:) is a non-empty set D, called the DOMAIN OF DISCOURSE of M.

         2.  If P is an n-place predicate then M(P) is a set of n-tuples,
             <x1,x2,...,xn> of elements of D.  This set is called the
             EXTENSION of P in M.  Further, it's required that the extension
             of the identity symbol ('=') consists of all pairs <x,x>
             for x in D.

         3.  If c is any const object symbol, then M(c) is an element of D,
             and is called the REFERENT of c in M.

Satisfaction & Truth
====================

   @@@ This is all from Barwise; p500-505
   a VARIABLE ASSIGNMENT in M is, by definition, some partial function g
   defined on a set of variables and taking values in the set D.

         Example

         Given,  D = { a, b, c }  then the following would all be variable
         assignments in M:

         - The function g1 which assigns b to the variable x.

         - The function g2 which assigns a, b and c to the variables
           x, y and z respectively.

         - The function g3 which assigns b to all the variables of the
           language.

         - The function g4 which assigns no values to variables.  The empty
           function g4 is sometimes denoted g0.

   Given a wff P, We say that the variable assignment g is appropriate for P
   if all the FREE VARIABLES (unbound by a quantifier) of P are in the domain
   of g, that is, if g assigns objects to all the free variables in P.  Thus
   the four variable assignments g1,g2,g3 and g4 above would have been
   appropriate for the following sorts of wff, respectively:

         Example (continued)

         - g1 is appropriate for any wff with the single free variable x,
           or with no free variables at all.

         - g2 is appropriate for any wff whose free variables are a subset
           of { x, y, z }.

         - g3 is appropriate for any wff at all.

         - g4 (= g0) is appropriate for any wff with no free variables.

   'g[v/b]' is the variable assignment whose domain is that of g plus the
   variable v and which asigns the same values as g, except that the new
   assignment assigns b to the variable v.

         Example (continued)

         - g1 assigns b to variable x, so g1[y/c] assigns b to x, and c to y.
           By contrast g1[x/c] assigns only c to x.

         - g2 assigns a, b, c to x, y, z.  Then g2[x/b] assigns b, b, c to
           x, y, z.  g2[u/c] assigns c,a,b,c to u,x,y,z.

         - g3 assigns b to all variables of the language.  g3[y/b] is the same
           assignment, g3, but g3[y/c] is different.  It assigns c to y, b to
           every other variable.

         - g4, the empty function, doesn't assign values to any variables.
           Thus, g4[x/b] is the function which assigns b to x, making it
           equivalent to g1.

   If a variable assignment g is appropriate for a wff P, then between M
   and g, all the terms (contants and variables) in P have a denotation.
   For any term t, we write [t](M,g) for the denotation of t.  Thus, [t](M,g)
   is t^M if t is an individual constant symbol and g(t) if t is a variable.

   SATISFIES

   Definition:  Let P be a wff and g be an assignment in M which is
   appropriate for P.

         It's customary to write 'M |= P[g]', to say the variable assignment
         g satisfies wff P in the model M.

         1.  Atomic WFF.  Suppose P is R(t1,...,tn), where R is an n-place
             predicate.  Then M |= P[g] (g Satisfies P in M) iff the n-tuple
             <[t1](M,g), ..., [tn](M,g)> is in R^M.

         2.  Negation.  Suppose P is -Q.  Then M |= P[g] iff g does not
             satisfy Q.

         3.  Conjunction.  Suppose P is Q ^ R.  Then M |= P[g] iff g satisfies
             both Q and R.

         4.  Disjunction.  Suppose P is Q V R.  Then M |= P[g] iff g
             satisfies Q or R or both.

         5.  Conditional.  Suppose P is Q -> R.  Then M |= P[g] iff g does
             not satisfy Q, or g satisfies R, or both.

         6.  Biconditional.  Suppose P is Q <-> R.  Then M |= P[g] iff
             g satisfies both Q and R, or neither.

         7.  Universal Quantification.  Suppose P is Av:Q.  Then M |= P[g]
             iff for every d in D^M, g[v/d] satisfies Q.

         8.  Existential Quantification.  Suppose P is Ev:Q.  Then M |= P[g]
             iff for some d in D^M, g[v/d] satisfies Q.
 
   TRUTH

   Let L be some first-order language and let M be a model for L.  A sentence
   P of L is true in M iff the empty variable assignment g0 satisfies P in M.
   Otherwise P is false in M.

         M |= P         (P is true in M, M makes P true)

   Proposition 1.  Let M1 and M2 be models which have the same domain and
   assign the same interpretations to the predicates and constant symbols
   in a wff P.  Let g1 and g2 be variable assignments that assign the same
   objects to the free variables in P.  Then M1 |= P[g1] iff M2 |= P[g2].

   Definition (first-order consequence).  A sentence Q is a FIRST-ORDER
   CONSEQUENCE of a set T = {P1,...} of wffs iff every model that makes
   all the sentences in T true also makes Q true.

   Definition (first-order validity).  A sentence P is a FIRST-ORDER VALIDITY
   iff every model makes P true.

   A VALIDITY is equivalent to a first-order logic version of a tautology.

